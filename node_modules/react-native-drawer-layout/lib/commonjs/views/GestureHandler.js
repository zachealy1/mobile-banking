"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GestureState = exports.GestureHandlerRootView = exports.GestureDetector = exports.Gesture = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// FIXME: Inline this type instead of getting it from react-native-gesture-handler
// Otherwise, we get a type error:
// Exported variable 'GestureDetector' has or is using name 'GestureDetectorProps' from external module ".." but cannot be named.

const GestureDetector = ({
  gesture: _0,
  userSelect: _1,
  children
}) => {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: children
  });
};
exports.GestureDetector = GestureDetector;
const GestureHandlerRootView = exports.GestureHandlerRootView = _reactNative.View;
const Gesture = exports.Gesture = undefined;
let GestureState = exports.GestureState = /*#__PURE__*/function (GestureState) {
  GestureState[GestureState["UNDETERMINED"] = 0] = "UNDETERMINED";
  GestureState[GestureState["FAILED"] = 1] = "FAILED";
  GestureState[GestureState["BEGAN"] = 2] = "BEGAN";
  GestureState[GestureState["CANCELLED"] = 3] = "CANCELLED";
  GestureState[GestureState["ACTIVE"] = 4] = "ACTIVE";
  GestureState[GestureState["END"] = 5] = "END";
  return GestureState;
}({});
//# sourceMappingURL=GestureHandler.js.map