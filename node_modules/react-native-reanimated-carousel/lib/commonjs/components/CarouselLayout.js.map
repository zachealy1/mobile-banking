{"version":3,"sources":["CarouselLayout.tsx"],"names":["CarouselLayout","React","forwardRef","_props","ref","props","layout","itemDimensions","testID","loop","autoFillData","data","dataLength","rawDataLength","mode","style","containerStyle","width","height","vertical","autoPlay","windowSize","autoPlayReverse","autoPlayInterval","scrollAnimationDuration","withAnimation","fixedDirection","renderItem","onScrollEnd","onSnapToItem","onScrollStart","onProgressChange","customAnimation","defaultIndex","commonVariables","size","handlerOffset","layoutConfig","offsetX","totalSize","x","value","Number","isNaN","carouselController","duration","_onScrollEnd","getSharedIndex","useCallback","_sharedIndex","Math","round","realIndex","index","start","startAutoPlay","pause","pauseAutoPlay","scrollViewGestureOnScrollStart","scrollViewGestureOnScrollEnd","scrollViewGestureOnTouchBegin","scrollViewGestureOnTouchEnd","layoutStyle","styles","layoutContainer","contentContainer","itemsVertical","itemsHorizontal","StyleSheet","create","display","overflow","flexDirection"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { StyleSheet, type ViewStyle } from \"react-native\";\nimport { GestureHandlerRootView } from \"react-native-gesture-handler\";\nimport { runOnJS, useAnimatedStyle, useDerivedValue } from \"react-native-reanimated\";\nimport { useAutoPlay } from \"../hooks/useAutoPlay\";\nimport { useCarouselController } from \"../hooks/useCarouselController\";\nimport { useCommonVariables } from \"../hooks/useCommonVariables\";\nimport { useLayoutConfig } from \"../hooks/useLayoutConfig\";\nimport { useOnProgressChange } from \"../hooks/useOnProgressChange\";\nimport { useGlobalState } from \"../store\";\nimport { ICarouselInstance } from \"../types\";\nimport { computedRealIndexWithAutoFillData } from \"../utils/computed-with-auto-fill-data\";\nimport { ItemRenderer } from \"./ItemRenderer\";\nimport { ScrollViewGesture } from \"./ScrollViewGesture\";\n\nexport type TAnimationStyle = (value: number) => ViewStyle;\n\nexport const CarouselLayout = React.forwardRef<ICarouselInstance>((_props, ref) => {\n  const { props, layout } = useGlobalState();\n  const { itemDimensions } = layout;\n\n  const {\n    testID,\n    loop,\n    autoFillData,\n    // Fill data with autoFillData\n    data,\n    // Length of fill data\n    dataLength,\n    // Length of raw data\n    rawDataLength,\n    mode,\n    style,\n    containerStyle,\n    width,\n    height,\n    vertical,\n    autoPlay,\n    windowSize,\n    autoPlayReverse,\n    autoPlayInterval,\n    scrollAnimationDuration,\n    withAnimation,\n    fixedDirection,\n    renderItem,\n    onScrollEnd,\n    onSnapToItem,\n    onScrollStart,\n    onProgressChange,\n    customAnimation,\n    defaultIndex,\n  } = props;\n\n  const commonVariables = useCommonVariables(props);\n  const { size, handlerOffset } = commonVariables;\n  const layoutConfig = useLayoutConfig({ ...props, size });\n\n  const offsetX = useDerivedValue(() => {\n    const totalSize = size * dataLength;\n    const x = handlerOffset.value % totalSize;\n\n    if (!loop) return handlerOffset.value;\n\n    return Number.isNaN(x) ? 0 : x;\n  }, [loop, size, dataLength]);\n\n  useOnProgressChange({\n    autoFillData,\n    loop,\n    size,\n    offsetX,\n    rawDataLength,\n    onProgressChange,\n  });\n\n  const carouselController = useCarouselController({\n    ref,\n    loop,\n    size,\n    dataLength,\n    autoFillData,\n    handlerOffset,\n    withAnimation,\n    defaultIndex,\n    fixedDirection,\n    duration: scrollAnimationDuration,\n    onScrollEnd: () => runOnJS(_onScrollEnd)(),\n    onScrollStart: () => !!onScrollStart && runOnJS(onScrollStart)(),\n  });\n\n  const {\n    getSharedIndex,\n    // index, // Animated index. Could be used for dynamic dimension\n  } = carouselController;\n\n  const _onScrollEnd = React.useCallback(() => {\n    const _sharedIndex = Math.round(getSharedIndex());\n\n    const realIndex = computedRealIndexWithAutoFillData({\n      index: _sharedIndex,\n      dataLength: rawDataLength,\n      loop,\n      autoFillData,\n    });\n\n    if (onSnapToItem) onSnapToItem(realIndex);\n\n    if (onScrollEnd) onScrollEnd(realIndex);\n  }, [loop, autoFillData, rawDataLength, getSharedIndex, onSnapToItem, onScrollEnd]);\n\n  const { start: startAutoPlay, pause: pauseAutoPlay } = useAutoPlay({\n    autoPlay,\n    autoPlayInterval,\n    autoPlayReverse,\n    carouselController,\n  });\n\n  const scrollViewGestureOnScrollStart = React.useCallback(() => {\n    pauseAutoPlay();\n    onScrollStart?.();\n  }, [onScrollStart, pauseAutoPlay]);\n\n  const scrollViewGestureOnScrollEnd = React.useCallback(() => {\n    startAutoPlay();\n    _onScrollEnd();\n  }, [_onScrollEnd, startAutoPlay]);\n\n  const scrollViewGestureOnTouchBegin = React.useCallback(pauseAutoPlay, [pauseAutoPlay]);\n\n  const scrollViewGestureOnTouchEnd = React.useCallback(startAutoPlay, [startAutoPlay]);\n\n  const layoutStyle = useAnimatedStyle(() => {\n    // const dimension = itemDimensions.value[index.value];\n\n    // if (!dimension) {\n    //   return {};\n    // }\n    return {\n      // height: dimension.height, // For dynamic dimension in the future\n\n      width: width || \"100%\", // [width is deprecated]\n      height: height || \"100%\", // [height is deprecated]\n    };\n  }, [width, height, size, itemDimensions]);\n\n  return (\n    <GestureHandlerRootView style={[styles.layoutContainer, containerStyle]}>\n      <ScrollViewGesture\n        size={size}\n        key={mode}\n        translation={handlerOffset}\n        style={[\n          styles.contentContainer, // [deprecated]\n          layoutStyle,\n          style,\n          vertical ? styles.itemsVertical : styles.itemsHorizontal,\n        ]}\n        testID={testID}\n        onScrollStart={scrollViewGestureOnScrollStart}\n        onScrollEnd={scrollViewGestureOnScrollEnd}\n        onTouchBegin={scrollViewGestureOnTouchBegin}\n        onTouchEnd={scrollViewGestureOnTouchEnd}\n      >\n        <ItemRenderer\n          data={data}\n          dataLength={dataLength}\n          rawDataLength={rawDataLength}\n          loop={loop}\n          size={size}\n          windowSize={windowSize}\n          autoFillData={autoFillData}\n          offsetX={offsetX}\n          handlerOffset={handlerOffset}\n          layoutConfig={layoutConfig}\n          renderItem={renderItem}\n          customAnimation={customAnimation}\n        />\n      </ScrollViewGesture>\n    </GestureHandlerRootView>\n  );\n});\n\nconst styles = StyleSheet.create({\n  layoutContainer: {\n    display: \"flex\",\n  },\n  contentContainer: {\n    overflow: \"hidden\",\n  },\n  itemsHorizontal: {\n    flexDirection: \"row\",\n  },\n  itemsVertical: {\n    flexDirection: \"column\",\n  },\n});\n"]}