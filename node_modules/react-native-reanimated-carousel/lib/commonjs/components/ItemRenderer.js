"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ItemRenderer = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNativeReanimated = require("react-native-reanimated");

var _ItemLayout = require("./ItemLayout");

var _useVisibleRanges = require("../hooks/useVisibleRanges");

var _computedWithAutoFillData = require("../utils/computed-with-auto-fill-data");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ItemRenderer = props => {
  const {
    data,
    size,
    windowSize,
    handlerOffset,
    offsetX,
    dataLength,
    rawDataLength,
    loop,
    autoFillData,
    layoutConfig,
    renderItem,
    customAnimation
  } = props;
  const visibleRanges = (0, _useVisibleRanges.useVisibleRanges)({
    total: dataLength,
    viewSize: size,
    translation: handlerOffset,
    windowSize,
    loop
  });

  const [displayedItems, setDisplayedItems] = _react.default.useState(null);

  (0, _reactNativeReanimated.useAnimatedReaction)(() => visibleRanges.value, ranges => (0, _reactNativeReanimated.runOnJS)(setDisplayedItems)(ranges), [visibleRanges]);
  if (!displayedItems) return null;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, data.map((item, index) => {
    const realIndex = (0, _computedWithAutoFillData.computedRealIndexWithAutoFillData)({
      index,
      dataLength: rawDataLength,
      loop,
      autoFillData
    });
    const {
      negativeRange,
      positiveRange
    } = displayedItems;
    const shouldRender = index >= negativeRange[0] && index <= negativeRange[1] || index >= positiveRange[0] && index <= positiveRange[1];
    if (!shouldRender) return null;
    return /*#__PURE__*/_react.default.createElement(_ItemLayout.ItemLayout, {
      key: index,
      index: index,
      handlerOffset: offsetX,
      visibleRanges: visibleRanges,
      animationStyle: customAnimation || layoutConfig
    }, _ref => {
      let {
        animationValue
      } = _ref;
      return renderItem({
        item,
        index: realIndex,
        animationValue
      });
    });
  }));
};

exports.ItemRenderer = ItemRenderer;
//# sourceMappingURL=ItemRenderer.js.map