{"version":3,"sources":["ItemRenderer.tsx"],"names":["ItemRenderer","props","data","size","windowSize","handlerOffset","offsetX","dataLength","rawDataLength","loop","autoFillData","layoutConfig","renderItem","customAnimation","visibleRanges","total","viewSize","translation","displayedItems","setDisplayedItems","React","useState","value","ranges","map","item","index","realIndex","negativeRange","positiveRange","shouldRender","animationValue"],"mappings":";;;;;;;AAAA;;AAIA;;AAGA;;AAGA;;AAEA;;;;AAiBO,MAAMA,YAAuB,GAAIC,KAAD,IAAW;AAChD,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,UAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA,OALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA,aAPI;AAQJC,IAAAA,IARI;AASJC,IAAAA,YATI;AAUJC,IAAAA,YAVI;AAWJC,IAAAA,UAXI;AAYJC,IAAAA;AAZI,MAaFZ,KAbJ;AAeA,QAAMa,aAAa,GAAG,wCAAiB;AACrCC,IAAAA,KAAK,EAAER,UAD8B;AAErCS,IAAAA,QAAQ,EAAEb,IAF2B;AAGrCc,IAAAA,WAAW,EAAEZ,aAHwB;AAIrCD,IAAAA,UAJqC;AAKrCK,IAAAA;AALqC,GAAjB,CAAtB;;AAQA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCC,eAAMC,QAAN,CAA8B,IAA9B,CAA5C;;AAEA,kDACE,MAAMP,aAAa,CAACQ,KADtB,EAEGC,MAAD,IAAY,oCAAQJ,iBAAR,EAA2BI,MAA3B,CAFd,EAGE,CAACT,aAAD,CAHF;AAMA,MAAI,CAACI,cAAL,EAAqB,OAAO,IAAP;AAErB,sBACE,4DACGhB,IAAI,CAACsB,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,UAAMC,SAAS,GAAG,iEAAkC;AAClDD,MAAAA,KADkD;AAElDnB,MAAAA,UAAU,EAAEC,aAFsC;AAGlDC,MAAAA,IAHkD;AAIlDC,MAAAA;AAJkD,KAAlC,CAAlB;AAOA,UAAM;AAAEkB,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAAmCX,cAAzC;AAEA,UAAMY,YAAY,GACfJ,KAAK,IAAIE,aAAa,CAAC,CAAD,CAAtB,IAA6BF,KAAK,IAAIE,aAAa,CAAC,CAAD,CAApD,IACCF,KAAK,IAAIG,aAAa,CAAC,CAAD,CAAtB,IAA6BH,KAAK,IAAIG,aAAa,CAAC,CAAD,CAFtD;AAIA,QAAI,CAACC,YAAL,EAAmB,OAAO,IAAP;AAEnB,wBACE,6BAAC,sBAAD;AACE,MAAA,GAAG,EAAEJ,KADP;AAEE,MAAA,KAAK,EAAEA,KAFT;AAGE,MAAA,aAAa,EAAEpB,OAHjB;AAIE,MAAA,aAAa,EAAEQ,aAJjB;AAKE,MAAA,cAAc,EAAED,eAAe,IAAIF;AALrC,OAOG;AAAA,UAAC;AAAEoB,QAAAA;AAAF,OAAD;AAAA,aACCnB,UAAU,CAAC;AACTa,QAAAA,IADS;AAETC,QAAAA,KAAK,EAAEC,SAFE;AAGTI,QAAAA;AAHS,OAAD,CADX;AAAA,KAPH,CADF;AAiBD,GAjCA,CADH,CADF;AAsCD,CAxEM","sourcesContent":["import React from \"react\";\nimport type { FC } from \"react\";\nimport type { ViewStyle } from \"react-native\";\nimport type { SharedValue } from \"react-native-reanimated\";\nimport { runOnJS, useAnimatedReaction } from \"react-native-reanimated\";\n\nimport type { TAnimationStyle } from \"./ItemLayout\";\nimport { ItemLayout } from \"./ItemLayout\";\n\nimport type { VisibleRanges } from \"../hooks/useVisibleRanges\";\nimport { useVisibleRanges } from \"../hooks/useVisibleRanges\";\nimport type { CarouselRenderItem } from \"../types\";\nimport { computedRealIndexWithAutoFillData } from \"../utils/computed-with-auto-fill-data\";\n\ninterface Props {\n  data: any[];\n  dataLength: number;\n  rawDataLength: number;\n  loop: boolean;\n  size: number;\n  windowSize?: number;\n  autoFillData: boolean;\n  offsetX: SharedValue<number>;\n  handlerOffset: SharedValue<number>;\n  layoutConfig: TAnimationStyle;\n  renderItem: CarouselRenderItem<any>;\n  customAnimation?: (value: number) => ViewStyle;\n}\n\nexport const ItemRenderer: FC<Props> = (props) => {\n  const {\n    data,\n    size,\n    windowSize,\n    handlerOffset,\n    offsetX,\n    dataLength,\n    rawDataLength,\n    loop,\n    autoFillData,\n    layoutConfig,\n    renderItem,\n    customAnimation,\n  } = props;\n\n  const visibleRanges = useVisibleRanges({\n    total: dataLength,\n    viewSize: size,\n    translation: handlerOffset,\n    windowSize,\n    loop,\n  });\n\n  const [displayedItems, setDisplayedItems] = React.useState<VisibleRanges>(null!);\n\n  useAnimatedReaction(\n    () => visibleRanges.value,\n    (ranges) => runOnJS(setDisplayedItems)(ranges),\n    [visibleRanges]\n  );\n\n  if (!displayedItems) return null;\n\n  return (\n    <>\n      {data.map((item, index) => {\n        const realIndex = computedRealIndexWithAutoFillData({\n          index,\n          dataLength: rawDataLength,\n          loop,\n          autoFillData,\n        });\n\n        const { negativeRange, positiveRange } = displayedItems;\n\n        const shouldRender =\n          (index >= negativeRange[0] && index <= negativeRange[1]) ||\n          (index >= positiveRange[0] && index <= positiveRange[1]);\n\n        if (!shouldRender) return null;\n\n        return (\n          <ItemLayout\n            key={index}\n            index={index}\n            handlerOffset={offsetX}\n            visibleRanges={visibleRanges}\n            animationStyle={customAnimation || layoutConfig}\n          >\n            {({ animationValue }) =>\n              renderItem({\n                item,\n                index: realIndex,\n                animationValue,\n              })\n            }\n          </ItemLayout>\n        );\n      })}\n    </>\n  );\n};\n"]}