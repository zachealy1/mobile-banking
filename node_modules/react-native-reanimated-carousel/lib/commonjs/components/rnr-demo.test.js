"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("useSharedValue", () => {
  it("retains value on rerender", () => {
    const initialValue = 0;
    const updatedValue = 1;

    const TestComponent = props => {
      const opacity = (0, _reactNativeReanimated.useDerivedValue)(() => props.value, [props.value]);
      const animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => ({
        opacity: opacity.value
      }), [opacity]);
      return /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
        style: animatedStyle
      });
    }; // When rendering with initial value


    const wrapper = _reactTestRenderer.default.create( /*#__PURE__*/_react.default.createElement(TestComponent, {
      key: "box",
      value: initialValue
    }));

    expect(typeof wrapper.root.children[0] !== "string" ? wrapper.root.children[0].props.style.jestAnimatedStyle.current.value.opacity : false).toBe(initialValue); // When rendering with updated value

    wrapper.update( /*#__PURE__*/_react.default.createElement(TestComponent, {
      key: "box",
      value: updatedValue
    }));
    expect(typeof wrapper.root.children[0] !== "string" ? wrapper.root.children[0].props.style.jestAnimatedStyle.current.value.opacity : false).toBe(initialValue);
  });
});
//# sourceMappingURL=rnr-demo.test.js.map