{"version":3,"sources":["rnr-demo.test.tsx"],"names":["describe","it","initialValue","updatedValue","TestComponent","props","opacity","value","animatedStyle","wrapper","renderer","create","expect","root","children","style","jestAnimatedStyle","current","toBe","update"],"mappings":";;AACA;;AACA;;AACA;;;;;;;;AAEAA,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BC,EAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpC,UAAMC,YAAY,GAAG,CAArB;AACA,UAAMC,YAAY,GAAG,CAArB;;AAOA,UAAMC,aAAwB,GAAIC,KAAD,IAAW;AAC1C,YAAMC,OAAO,GAAG,4CAAgB,MAAMD,KAAK,CAACE,KAA5B,EAAmC,CAACF,KAAK,CAACE,KAAP,CAAnC,CAAhB;AACA,YAAMC,aAAa,GAAG,6CACpB,OAAO;AACLF,QAAAA,OAAO,EAAEA,OAAO,CAACC;AADZ,OAAP,CADoB,EAIpB,CAACD,OAAD,CAJoB,CAAtB;AAOA,0BAAO,6BAAC,8BAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAEE;AAAtB,QAAP;AACD,KAVD,CAToC,CAqBpC;;;AACA,UAAMC,OAAO,GAAGC,2BAASC,MAAT,eAAgB,6BAAC,aAAD;AAAe,MAAA,GAAG,EAAC,KAAnB;AAAyB,MAAA,KAAK,EAAET;AAAhC,MAAhB,CAAhB;;AAEAU,IAAAA,MAAM,CACJ,OAAOH,OAAO,CAACI,IAAR,CAAaC,QAAb,CAAsB,CAAtB,CAAP,KAAoC,QAApC,GACIL,OAAO,CAACI,IAAR,CAAaC,QAAb,CAAsB,CAAtB,EAAyBT,KAAzB,CAA+BU,KAA/B,CAAqCC,iBAArC,CAAuDC,OAAvD,CAA+DV,KAA/D,CAAqED,OADzE,GAEI,KAHA,CAAN,CAIEY,IAJF,CAIOhB,YAJP,EAxBoC,CA8BpC;;AACAO,IAAAA,OAAO,CAACU,MAAR,eAAe,6BAAC,aAAD;AAAe,MAAA,GAAG,EAAC,KAAnB;AAAyB,MAAA,KAAK,EAAEhB;AAAhC,MAAf;AAEAS,IAAAA,MAAM,CACJ,OAAOH,OAAO,CAACI,IAAR,CAAaC,QAAb,CAAsB,CAAtB,CAAP,KAAoC,QAApC,GACIL,OAAO,CAACI,IAAR,CAAaC,QAAb,CAAsB,CAAtB,EAAyBT,KAAzB,CAA+BU,KAA/B,CAAqCC,iBAArC,CAAuDC,OAAvD,CAA+DV,KAA/D,CAAqED,OADzE,GAEI,KAHA,CAAN,CAIEY,IAJF,CAIOhB,YAJP;AAKD,GAtCC,CAAF;AAuCD,CAxCO,CAAR","sourcesContent":["import type { FC } from \"react\";\nimport React from \"react\";\nimport Animated, { useAnimatedStyle, useDerivedValue } from \"react-native-reanimated\";\nimport renderer from \"react-test-renderer\";\n\ndescribe(\"useSharedValue\", () => {\n  it(\"retains value on rerender\", () => {\n    const initialValue = 0;\n    const updatedValue = 1;\n\n    interface Props {\n      key: string;\n      value: number;\n    }\n\n    const TestComponent: FC<Props> = (props) => {\n      const opacity = useDerivedValue(() => props.value, [props.value]);\n      const animatedStyle = useAnimatedStyle(\n        () => ({\n          opacity: opacity.value,\n        }),\n        [opacity]\n      );\n\n      return <Animated.View style={animatedStyle} />;\n    };\n\n    // When rendering with initial value\n    const wrapper = renderer.create(<TestComponent key=\"box\" value={initialValue} />);\n\n    expect(\n      typeof wrapper.root.children[0] !== \"string\"\n        ? wrapper.root.children[0].props.style.jestAnimatedStyle.current.value.opacity\n        : false\n    ).toBe(initialValue);\n\n    // When rendering with updated value\n    wrapper.update(<TestComponent key=\"box\" value={updatedValue} />);\n\n    expect(\n      typeof wrapper.root.children[0] !== \"string\"\n        ? wrapper.root.children[0].props.style.jestAnimatedStyle.current.value.opacity\n        : false\n    ).toBe(initialValue);\n  });\n});\n"]}