"use strict";

var _reactHooks = require("@testing-library/react-hooks");

var _useAutoPlay = require("./useAutoPlay");

describe("useAutoPlay", () => {
  // Mock timer
  beforeEach(() => {
    jest.useFakeTimers();
    jest.clearAllMocks();
  });
  afterEach(() => {
    jest.clearAllTimers();
    jest.useRealTimers();
  }); // Mock carousel controller

  const mockCarouselController = {
    prev: jest.fn(),
    next: jest.fn(),
    getCurrentIndex: jest.fn(),
    getSharedIndex: jest.fn(),
    scrollTo: jest.fn()
  };
  it("should start autoplay when autoPlay is true", () => {
    (0, _reactHooks.renderHook)(() => (0, _useAutoPlay.useAutoPlay)({
      autoPlay: true,
      autoPlayInterval: 1000,
      carouselController: mockCarouselController
    }));
    (0, _reactHooks.act)(() => {
      jest.runOnlyPendingTimers();
    });
    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);
    expect(mockCarouselController.next).toHaveBeenCalledWith(expect.objectContaining({
      onFinished: expect.any(Function)
    }));
  });
  it("should not start autoplay when autoPlay is false", () => {
    (0, _reactHooks.renderHook)(() => (0, _useAutoPlay.useAutoPlay)({
      autoPlay: false,
      autoPlayInterval: 1000,
      carouselController: mockCarouselController
    }));
    (0, _reactHooks.act)(() => {
      jest.runOnlyPendingTimers();
    });
    expect(mockCarouselController.next).not.toHaveBeenCalled();
  });
  it("should play in reverse when autoPlayReverse is true", () => {
    (0, _reactHooks.renderHook)(() => (0, _useAutoPlay.useAutoPlay)({
      autoPlay: true,
      autoPlayReverse: true,
      autoPlayInterval: 1000,
      carouselController: mockCarouselController
    }));
    (0, _reactHooks.act)(() => {
      jest.runOnlyPendingTimers();
    });
    expect(mockCarouselController.prev).toHaveBeenCalledTimes(1);
    expect(mockCarouselController.next).not.toHaveBeenCalled();
  });
  it("should clear timer on unmount", () => {
    const {
      unmount
    } = (0, _reactHooks.renderHook)(() => (0, _useAutoPlay.useAutoPlay)({
      autoPlay: true,
      autoPlayInterval: 1000,
      carouselController: mockCarouselController
    })); // Run the timer once to ensure it's set

    (0, _reactHooks.act)(() => {
      jest.runOnlyPendingTimers();
    }); // Clear previous call records

    mockCarouselController.next.mockClear(); // Then unmount the component and run the timer again

    (0, _reactHooks.act)(() => {
      unmount();
      jest.runOnlyPendingTimers();
    });
    expect(mockCarouselController.next).not.toHaveBeenCalled();
  });
  it("should pause and resume autoplay", () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useAutoPlay.useAutoPlay)({
      autoPlay: true,
      autoPlayInterval: 1000,
      carouselController: mockCarouselController
    })); // Run the timer once to ensure it's set

    (0, _reactHooks.act)(() => {
      jest.runOnlyPendingTimers();
    }); // Clear previous call records

    mockCarouselController.next.mockClear(); // Pause autoplay

    (0, _reactHooks.act)(() => {
      result.current.pause();
      jest.runOnlyPendingTimers();
    });
    expect(mockCarouselController.next).not.toHaveBeenCalled(); // Resume autoplay

    (0, _reactHooks.act)(() => {
      result.current.start();
      jest.runOnlyPendingTimers();
    });
    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);
  });
  it("should respect autoPlayInterval timing", () => {
    (0, _reactHooks.renderHook)(() => (0, _useAutoPlay.useAutoPlay)({
      autoPlay: true,
      autoPlayInterval: 2000,
      carouselController: mockCarouselController
    })); // Advance less than interval

    (0, _reactHooks.act)(() => {
      jest.advanceTimersByTime(1500);
    });
    expect(mockCarouselController.next).not.toHaveBeenCalled(); // Advance to complete interval

    (0, _reactHooks.act)(() => {
      jest.advanceTimersByTime(500);
    });
    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);
  });
  it("should chain autoplay calls correctly", () => {
    (0, _reactHooks.renderHook)(() => (0, _useAutoPlay.useAutoPlay)({
      autoPlay: true,
      autoPlayInterval: 1000,
      carouselController: mockCarouselController
    })); // First interval

    (0, _reactHooks.act)(() => {
      jest.runOnlyPendingTimers();
    });
    expect(mockCarouselController.next).toHaveBeenCalledTimes(1); // Trigger onFinished callback to start the next timer

    const onFinished = mockCarouselController.next.mock.calls[0][0].onFinished;
    (0, _reactHooks.act)(() => {
      onFinished();
      jest.runOnlyPendingTimers();
    });
    expect(mockCarouselController.next).toHaveBeenCalledTimes(2); // Trigger onFinished callback to start the next timer

    const onFinished2 = mockCarouselController.next.mock.calls[1][0].onFinished;
    (0, _reactHooks.act)(() => {
      onFinished2();
      jest.runOnlyPendingTimers();
    });
    expect(mockCarouselController.next).toHaveBeenCalledTimes(3);
  });
});
//# sourceMappingURL=useAutoPlay.test.js.map