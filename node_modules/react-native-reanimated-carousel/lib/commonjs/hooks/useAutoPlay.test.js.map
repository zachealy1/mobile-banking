{"version":3,"sources":["useAutoPlay.test.ts"],"names":["describe","beforeEach","jest","useFakeTimers","clearAllMocks","afterEach","clearAllTimers","useRealTimers","mockCarouselController","prev","fn","next","getCurrentIndex","getSharedIndex","scrollTo","it","autoPlay","autoPlayInterval","carouselController","runOnlyPendingTimers","expect","toHaveBeenCalledTimes","toHaveBeenCalledWith","objectContaining","onFinished","any","Function","not","toHaveBeenCalled","autoPlayReverse","unmount","mockClear","result","current","pause","start","advanceTimersByTime","mock","calls","onFinished2"],"mappings":"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","sourcesContent":["import { act, renderHook } from \"@testing-library/react-hooks\";\n\nimport { useAutoPlay } from \"./useAutoPlay\";\n\ndescribe(\"useAutoPlay\", () => {\n  // Mock timer\n  beforeEach(() => {\n    jest.useFakeTimers();\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    jest.clearAllTimers();\n    jest.useRealTimers();\n  });\n\n  // Mock carousel controller\n  const mockCarouselController = {\n    prev: jest.fn(),\n    next: jest.fn(),\n    getCurrentIndex: jest.fn(),\n    getSharedIndex: jest.fn(),\n    scrollTo: jest.fn(),\n  };\n\n  it(\"should start autoplay when autoPlay is true\", () => {\n    renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);\n    expect(mockCarouselController.next).toHaveBeenCalledWith(\n      expect.objectContaining({\n        onFinished: expect.any(Function),\n      })\n    );\n  });\n\n  it(\"should not start autoplay when autoPlay is false\", () => {\n    renderHook(() =>\n      useAutoPlay({\n        autoPlay: false,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.next).not.toHaveBeenCalled();\n  });\n\n  it(\"should play in reverse when autoPlayReverse is true\", () => {\n    renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayReverse: true,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.prev).toHaveBeenCalledTimes(1);\n    expect(mockCarouselController.next).not.toHaveBeenCalled();\n  });\n\n  it(\"should clear timer on unmount\", () => {\n    const { unmount } = renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    // Run the timer once to ensure it's set\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n\n    // Clear previous call records\n    mockCarouselController.next.mockClear();\n\n    // Then unmount the component and run the timer again\n    act(() => {\n      unmount();\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.next).not.toHaveBeenCalled();\n  });\n\n  it(\"should pause and resume autoplay\", () => {\n    const { result } = renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    // Run the timer once to ensure it's set\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n\n    // Clear previous call records\n    mockCarouselController.next.mockClear();\n\n    // Pause autoplay\n    act(() => {\n      result.current.pause();\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.next).not.toHaveBeenCalled();\n\n    // Resume autoplay\n    act(() => {\n      result.current.start();\n      jest.runOnlyPendingTimers();\n    });\n\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"should respect autoPlayInterval timing\", () => {\n    renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayInterval: 2000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    // Advance less than interval\n    act(() => {\n      jest.advanceTimersByTime(1500);\n    });\n    expect(mockCarouselController.next).not.toHaveBeenCalled();\n\n    // Advance to complete interval\n    act(() => {\n      jest.advanceTimersByTime(500);\n    });\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"should chain autoplay calls correctly\", () => {\n    renderHook(() =>\n      useAutoPlay({\n        autoPlay: true,\n        autoPlayInterval: 1000,\n        carouselController: mockCarouselController,\n      })\n    );\n\n    // First interval\n    act(() => {\n      jest.runOnlyPendingTimers();\n    });\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(1);\n\n    // Trigger onFinished callback to start the next timer\n    const onFinished = mockCarouselController.next.mock.calls[0][0].onFinished;\n    act(() => {\n      onFinished();\n      jest.runOnlyPendingTimers();\n    });\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(2);\n\n    // Trigger onFinished callback to start the next timer\n    const onFinished2 = mockCarouselController.next.mock.calls[1][0].onFinished;\n    act(() => {\n      onFinished2();\n      jest.runOnlyPendingTimers();\n    });\n    expect(mockCarouselController.next).toHaveBeenCalledTimes(3);\n  });\n});\n"]}