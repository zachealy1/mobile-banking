"use strict";

var _reactHooks = require("@testing-library/react-hooks");

var _useCheckMounted = require("./useCheckMounted");

describe("useCheckMounted", () => {
  it("should be mounted after initialization", () => {
    const {
      result
    } = (0, _reactHooks.renderHook)(() => (0, _useCheckMounted.useCheckMounted)());
    expect(result.current.current).toBe(true);
  });
  it("should be unmounted after cleanup", () => {
    const {
      result,
      unmount
    } = (0, _reactHooks.renderHook)(() => (0, _useCheckMounted.useCheckMounted)());
    expect(result.current.current).toBe(true);
    unmount();
    expect(result.current.current).toBe(false);
  });
  it("should maintain mounted state during component lifecycle", () => {
    const {
      result,
      rerender
    } = (0, _reactHooks.renderHook)(() => (0, _useCheckMounted.useCheckMounted)());
    expect(result.current.current).toBe(true);
    rerender();
    expect(result.current.current).toBe(true);
  });
  it("should handle multiple mount/unmount cycles", () => {
    // First instance
    const hook1 = (0, _reactHooks.renderHook)(() => (0, _useCheckMounted.useCheckMounted)());
    expect(hook1.result.current.current).toBe(true);
    hook1.unmount();
    expect(hook1.result.current.current).toBe(false); // Second instance

    const hook2 = (0, _reactHooks.renderHook)(() => (0, _useCheckMounted.useCheckMounted)());
    expect(hook2.result.current.current).toBe(true);
    hook2.unmount();
    expect(hook2.result.current.current).toBe(false);
  });
});
//# sourceMappingURL=useCheckMounted.test.js.map