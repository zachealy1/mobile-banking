{"version":3,"sources":["usePanGestureProxy.ts"],"names":["usePanGestureProxy","customization","onConfigurePanGesture","onGestureStart","onGestureUpdate","onGestureEnd","options","gesture","Gesture","Pan","withTestId","originalGestures","onBegin","onStart","onUpdate","onEnd","onFinalize","userDefinedConflictGestures","undefined","fakeOnBegin","cb","fakeOnStart","fakeOnUpdate","fakeOnEnd","fakeOnFinalize","e","success"],"mappings":"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","sourcesContent":["import { useMemo } from \"react\";\nimport type {\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n  PanGesture,\n  PanGestureHandlerEventPayload,\n} from \"react-native-gesture-handler\";\nimport { Gesture } from \"react-native-gesture-handler\";\n\nimport type { GestureConfig } from \"./useUpdateGestureConfig\";\nimport { useUpdateGestureConfig } from \"./useUpdateGestureConfig\";\n\nexport const usePanGestureProxy = (customization: {\n  onConfigurePanGesture?: (gesture: PanGesture) => void;\n  onGestureStart: (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => void;\n  onGestureUpdate: (event: GestureUpdateEvent<PanGestureHandlerEventPayload>) => void;\n  onGestureEnd: (\n    event: GestureStateChangeEvent<PanGestureHandlerEventPayload>,\n    success: boolean\n  ) => void;\n  options?: GestureConfig;\n}) => {\n  const {\n    onConfigurePanGesture,\n    onGestureStart,\n    onGestureUpdate,\n    onGestureEnd,\n    options = {},\n  } = customization;\n\n  const gesture = useMemo(() => {\n    const gesture = Gesture.Pan().withTestId(\"rnrc-gesture-handler\");\n\n    // Save the original gesture callbacks\n    const originalGestures = {\n      onBegin: gesture.onBegin,\n      onStart: gesture.onStart,\n      onUpdate: gesture.onUpdate,\n      onEnd: gesture.onEnd,\n      onFinalize: gesture.onFinalize,\n    };\n\n    // Save the user defined gesture callbacks\n    const userDefinedConflictGestures: {\n      onBegin?: Parameters<(typeof gesture)[\"onBegin\"]>[0];\n      onStart?: Parameters<(typeof gesture)[\"onStart\"]>[0];\n      onUpdate?: Parameters<(typeof gesture)[\"onUpdate\"]>[0];\n      onEnd?: Parameters<(typeof gesture)[\"onEnd\"]>[0];\n      onFinalize?: Parameters<(typeof gesture)[\"onFinalize\"]>[0];\n    } = {\n      onBegin: undefined,\n      onStart: undefined,\n      onUpdate: undefined,\n      onEnd: undefined,\n      onFinalize: undefined,\n    };\n\n    const fakeOnBegin: typeof gesture.onBegin = (cb) => {\n      // Using fakeOnBegin to save the user defined callback\n      userDefinedConflictGestures.onBegin = cb;\n      return gesture;\n    };\n\n    const fakeOnStart: typeof gesture.onStart = (cb) => {\n      // Using fakeOnStart to save the user defined callback\n      userDefinedConflictGestures.onStart = cb;\n      return gesture;\n    };\n\n    const fakeOnUpdate: typeof gesture.onUpdate = (cb) => {\n      // Using fakeOnUpdate to save the user defined callback\n      userDefinedConflictGestures.onUpdate = cb;\n      return gesture;\n    };\n\n    const fakeOnEnd: typeof gesture.onEnd = (cb) => {\n      // Using fakeOnEnd to save the user defined callback\n      userDefinedConflictGestures.onEnd = cb;\n      return gesture;\n    };\n\n    const fakeOnFinalize: typeof gesture.onFinalize = (cb) => {\n      // Using fakeOnFinalize to save the user defined callback\n      userDefinedConflictGestures.onFinalize = cb;\n      return gesture;\n    };\n\n    // Setup the fake callbacks\n    gesture.onBegin = fakeOnBegin;\n    gesture.onStart = fakeOnStart;\n    gesture.onUpdate = fakeOnUpdate;\n    gesture.onEnd = fakeOnEnd;\n    gesture.onFinalize = fakeOnFinalize;\n\n    if (onConfigurePanGesture)\n      // Get the gesture with the user defined configuration\n      onConfigurePanGesture(gesture);\n\n    // Restore the original callbacks\n    gesture.onBegin = originalGestures.onBegin;\n    gesture.onStart = originalGestures.onStart;\n    gesture.onUpdate = originalGestures.onUpdate;\n    gesture.onEnd = originalGestures.onEnd;\n    gesture.onFinalize = originalGestures.onFinalize;\n\n    // Setup the original callbacks with the user defined callbacks\n    gesture\n      .onBegin((e) => {\n        \"worklet\";\n\n        if (userDefinedConflictGestures.onBegin) userDefinedConflictGestures.onBegin(e);\n      })\n      .onStart((e) => {\n        \"worklet\";\n        onGestureStart(e);\n\n        if (userDefinedConflictGestures.onStart) userDefinedConflictGestures.onStart(e);\n      })\n      .onUpdate((e) => {\n        \"worklet\";\n        onGestureUpdate(e);\n\n        if (userDefinedConflictGestures.onUpdate) userDefinedConflictGestures.onUpdate(e);\n      })\n      .onEnd((e, success) => {\n        \"worklet\";\n        onGestureEnd(e, success);\n\n        if (userDefinedConflictGestures.onEnd) userDefinedConflictGestures.onEnd(e, success);\n      })\n      .onFinalize((e, success) => {\n        \"worklet\";\n\n        if (userDefinedConflictGestures.onFinalize)\n          userDefinedConflictGestures.onFinalize(e, success);\n      });\n\n    return gesture;\n  }, [onGestureStart, onGestureUpdate, onGestureEnd, onConfigurePanGesture]);\n\n  useUpdateGestureConfig(gesture, options);\n\n  return gesture;\n};\n"]}