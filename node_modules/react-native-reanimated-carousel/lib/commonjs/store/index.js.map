{"version":3,"sources":["index.tsx"],"names":["GlobalStateContext","React","createContext","GlobalStateProvider","children","value","containerSize","width","height","itemDimensions","updateItemDimensions","index","dimensions","updateContainerSize","layout","useGlobalState","context","useContext","Error"],"mappings":";;;;;;;AAAA;;AAEA;;;;AAmBO,MAAMA,kBAAkB,gBAAGC,eAAMC,aAAN,CAA8B,EAA9B,CAA3B;;;;AAEA,MAAMC,mBAAmB,GAAG,QAM7B;AAAA,MAN8B;AAClCC,IAAAA,QADkC;AAElCC,IAAAA;AAFkC,GAM9B;AACJ,QAAMC,aAAa,GAAG,2CAAkD;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,MAAM,EAAE;AAApB,GAAlD,CAAtB;AACA,QAAMC,cAAc,GAAG,2CAA+B,EAA/B,CAAvB;;AAEA,QAAMC,oBAAoB,GAAG,CAACC,KAAD,EAAgBC,UAAhB,KAAkE;AAC7F;;AAEAH,IAAAA,cAAc,CAACJ,KAAf,GAAuB,EAAE,GAAGI,cAAc,CAACJ,KAApB;AAA2B,OAACM,KAAD,GAASC;AAApC,KAAvB;AACD,GAJD;;AAMA,QAAMC,mBAAmB,GAAID,UAAD,IAAmD;AAC7E;;AACAN,IAAAA,aAAa,CAACD,KAAd,GAAsBO,UAAtB;AACD,GAHD;;AAKA,sBACE,6BAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAE,EACL,GAAGP,KADE;AAELS,MAAAA,MAAM,EAAE;AAAER,QAAAA,aAAF;AAAiBG,QAAAA,cAAjB;AAAiCC,QAAAA,oBAAjC;AAAuDG,QAAAA;AAAvD;AAFH;AADT,KAMGT,QANH,CADF;AAUD,CA/BM;;;;AAiCA,MAAMW,cAAc,GAAG,MAAM;AAClC,QAAMC,OAAO,GAAGf,eAAMgB,UAAN,CAAiBjB,kBAAjB,CAAhB;;AAEA,MAAI,CAACgB,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,SAAOF,OAAP;AACD,CARM","sourcesContent":["import React from \"react\";\n\nimport { SharedValue, useSharedValue } from \"react-native-reanimated\";\nimport type { TInitializeCarouselProps } from \"../hooks/useInitProps\";\n\ntype ItemDimensions = Record<number, { width: number; height: number }>;\n\nexport interface IContext {\n  props: TInitializeCarouselProps<any>;\n  common: {\n    size: number;\n    validLength: number;\n  };\n  layout: {\n    containerSize: SharedValue<{ width: number; height: number }>;\n    updateContainerSize: (dimensions: { width: number; height: number }) => void;\n    itemDimensions: SharedValue<ItemDimensions>;\n    updateItemDimensions: (index: number, dimensions: { width: number; height: number }) => void;\n  };\n}\n\nexport const GlobalStateContext = React.createContext<IContext>({} as IContext);\n\nexport const GlobalStateProvider = ({\n  children,\n  value,\n}: {\n  children: React.ReactNode;\n  value: Pick<IContext, \"props\" | \"common\">;\n}) => {\n  const containerSize = useSharedValue<{ width: number; height: number }>({ width: 0, height: 0 });\n  const itemDimensions = useSharedValue<ItemDimensions>({});\n\n  const updateItemDimensions = (index: number, dimensions: { width: number; height: number }) => {\n    \"worklet\";\n\n    itemDimensions.value = { ...itemDimensions.value, [index]: dimensions };\n  };\n\n  const updateContainerSize = (dimensions: { width: number; height: number }) => {\n    \"worklet\";\n    containerSize.value = dimensions;\n  };\n\n  return (\n    <GlobalStateContext.Provider\n      value={{\n        ...value,\n        layout: { containerSize, itemDimensions, updateItemDimensions, updateContainerSize },\n      }}\n    >\n      {children}\n    </GlobalStateContext.Provider>\n  );\n};\n\nexport const useGlobalState = () => {\n  const context = React.useContext(GlobalStateContext);\n\n  if (!context) {\n    throw new Error(\"useGlobalState must be used within a GlobalStateProvider\");\n  }\n\n  return context;\n};\n"]}