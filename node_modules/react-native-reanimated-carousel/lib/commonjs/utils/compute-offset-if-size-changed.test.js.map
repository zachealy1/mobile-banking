{"version":3,"sources":["compute-offset-if-size-changed.test.ts"],"names":["describe","it","prevIndex","prevSize","size","handlerOffset","result","finallyIndex","expect","toEqual"],"mappings":";;AAAA;;AAEAA,QAAQ,CAAC,4BAAD,EAA+B,MAAM;AAC3CC,EAAAA,EAAE,CAAC,qEAAD,EAAwE,MAAM;AAC9E,UAAMC,SAAS,GAAG,CAAlB;AACA,UAAMC,QAAQ,GAAG,GAAjB;AACA,UAAMC,IAAI,GAAG,GAAb;AACA,UAAMC,aAAa,GAAGH,SAAS,GAAGE,IAAlC;AACA,UAAME,MAAM,GAAG,4DAA2B;AACxCH,MAAAA,QADwC;AAExCC,MAAAA,IAFwC;AAGxCC,MAAAA;AAHwC,KAA3B,CAAf;AAMA,UAAME,YAAY,GAAGD,MAAM,GAAGF,IAA9B;AACAI,IAAAA,MAAM,CAACD,YAAD,CAAN,CAAqBE,OAArB,CAA6BP,SAA7B;AACD,GAbC,CAAF;AAeAD,EAAAA,EAAE,CAAC,6EAAD,EAAgF,MAAM;AACtF,UAAMC,SAAS,GAAG,CAAlB;AACA,UAAMC,QAAQ,GAAG,GAAjB;AACA,UAAMC,IAAI,GAAG,GAAb;AACA,UAAMC,aAAa,GAAGH,SAAS,GAAGC,QAAlC;AACA,UAAMG,MAAM,GAAG,4DAA2B;AACxCH,MAAAA,QADwC;AAExCC,MAAAA,IAFwC;AAGxCC,MAAAA;AAHwC,KAA3B,CAAf;AAMA,UAAME,YAAY,GAAGD,MAAM,GAAGF,IAA9B;AACAI,IAAAA,MAAM,CAACD,YAAD,CAAN,CAAqBE,OAArB,CAA6BP,SAA7B;AACD,GAbC,CAAF;AAeAD,EAAAA,EAAE,CAAC,6EAAD,EAAgF,MAAM;AACtF,UAAMC,SAAS,GAAG,CAAlB;AACA,UAAMC,QAAQ,GAAG,GAAjB;AACA,UAAMC,IAAI,GAAG,GAAb;AACA,UAAMC,aAAa,GAAGH,SAAS,GAAGC,QAAlC;AACA,UAAMG,MAAM,GAAG,4DAA2B;AACxCH,MAAAA,QADwC;AAExCC,MAAAA,IAFwC;AAGxCC,MAAAA;AAHwC,KAA3B,CAAf;AAMA,UAAME,YAAY,GAAGD,MAAM,GAAGF,IAA9B;AACAI,IAAAA,MAAM,CAACD,YAAD,CAAN,CAAqBE,OAArB,CAA6BP,SAA7B;AACD,GAbC,CAAF;AAeAD,EAAAA,EAAE,CAAC,6EAAD,EAAgF,MAAM;AACtF,UAAMC,SAAS,GAAG,CAAlB;AACA,UAAMC,QAAQ,GAAG,GAAjB;AACA,UAAMC,IAAI,GAAG,GAAb;AACA,UAAMC,aAAa,GAAGH,SAAS,GAAGC,QAAlC;AACA,UAAMG,MAAM,GAAG,4DAA2B;AACxCH,MAAAA,QADwC;AAExCC,MAAAA,IAFwC;AAGxCC,MAAAA;AAHwC,KAA3B,CAAf;AAMA,UAAME,YAAY,GAAGD,MAAM,GAAGF,IAA9B;AACAI,IAAAA,MAAM,CAACD,YAAD,CAAN,CAAqBE,OAArB,CAA6BP,SAA7B;AACD,GAbC,CAAF;AAeAD,EAAAA,EAAE,CAAC,6EAAD,EAAgF,MAAM;AACtF,UAAMC,SAAS,GAAG,CAAlB;AACA,UAAMC,QAAQ,GAAG,GAAjB;AACA,UAAMC,IAAI,GAAG,GAAb;AACA,UAAMC,aAAa,GAAGH,SAAS,GAAGC,QAAlC;AACA,UAAMG,MAAM,GAAG,4DAA2B;AACxCH,MAAAA,QADwC;AAExCC,MAAAA,IAFwC;AAGxCC,MAAAA;AAHwC,KAA3B,CAAf;AAMA,UAAME,YAAY,GAAGD,MAAM,GAAGF,IAA9B;AACAI,IAAAA,MAAM,CAACD,YAAD,CAAN,CAAqBE,OAArB,CAA6BP,SAA7B;AACD,GAbC,CAAF;AAcD,CA3EO,CAAR","sourcesContent":["import { computeOffsetIfSizeChanged } from \"./compute-offset-if-size-changed\";\n\ndescribe(\"computeOffsetIfSizeChanged\", () => {\n  it(\"[CASE 1] should return the correct values when size does not change\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 500;\n    const handlerOffset = prevIndex * size;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 2] should return the correct values when size changes from 500 to 400\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 400;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 3] should return the correct values when size changes from 500 to 499\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 499;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 4] should return the correct values when size changes from 500 to 501\", () => {\n    const prevIndex = 1;\n    const prevSize = 500;\n    const size = 501;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n\n  it(\"[CASE 5] should return the correct values when size changes from 224 to 524\", () => {\n    const prevIndex = 1;\n    const prevSize = 224;\n    const size = 524;\n    const handlerOffset = prevIndex * prevSize;\n    const result = computeOffsetIfSizeChanged({\n      prevSize,\n      size,\n      handlerOffset,\n    });\n\n    const finallyIndex = result / size;\n    expect(finallyIndex).toEqual(prevIndex);\n  });\n});\n"]}