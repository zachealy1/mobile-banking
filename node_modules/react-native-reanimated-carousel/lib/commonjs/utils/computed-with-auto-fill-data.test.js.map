{"version":3,"sources":["computed-with-auto-fill-data.test.ts"],"names":["SINGLE_ITEM","DOUBLE_ITEM","DATA_LENGTH","describe","it","data","result","loop","autoFillData","dataLength","expect","toEqual","size","value","rawDataLength","toBe","index"],"mappings":"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","sourcesContent":["import {\n  computedFillDataWithAutoFillData,\n  computedOffsetXValueWithAutoFillData,\n  computedRealIndexWithAutoFillData,\n  convertToSharedIndex,\n} from \"./computed-with-auto-fill-data\";\n\nimport { DATA_LENGTH } from \"../constants\";\n\nconst { SINGLE_ITEM, DOUBLE_ITEM } = DATA_LENGTH;\n\ndescribe(\"computed-with-auto-fill-data utilities\", () => {\n  describe(\"computedFillDataWithAutoFillData\", () => {\n    it(\"should handle single item\", () => {\n      const data = [1];\n      const result = computedFillDataWithAutoFillData({\n        data,\n        loop: true,\n        autoFillData: true,\n        dataLength: SINGLE_ITEM,\n      });\n\n      expect(result).toEqual([1, 1, 1]);\n    });\n\n    it(\"should handle double items\", () => {\n      const data = [1, 2];\n      const result = computedFillDataWithAutoFillData({\n        data,\n        loop: true,\n        autoFillData: true,\n        dataLength: DOUBLE_ITEM,\n      });\n\n      expect(result).toEqual([1, 2, 1, 2]);\n    });\n\n    it(\"should return original data when autoFillData is false\", () => {\n      const data = [1, 2, 3];\n      const result = computedFillDataWithAutoFillData({\n        data,\n        loop: true,\n        autoFillData: false,\n        dataLength: 3,\n      });\n\n      expect(result).toEqual(data);\n    });\n\n    it(\"should return original data when loop is false\", () => {\n      const data = [1, 2, 3];\n      const result = computedFillDataWithAutoFillData({\n        data,\n        loop: false,\n        autoFillData: true,\n        dataLength: 3,\n      });\n\n      expect(result).toEqual(data);\n    });\n  });\n\n  describe(\"computedOffsetXValueWithAutoFillData\", () => {\n    const size = 300;\n\n    it(\"should handle single item\", () => {\n      const result = computedOffsetXValueWithAutoFillData({\n        value: size * 2,\n        size,\n        rawDataLength: SINGLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(0); // value % size\n    });\n\n    it(\"should handle double items\", () => {\n      const result = computedOffsetXValueWithAutoFillData({\n        value: size * 3,\n        size,\n        rawDataLength: DOUBLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(size * 1); // value % (size * 2)\n    });\n\n    it(\"should return original value when autoFillData is false\", () => {\n      const value = size * 2;\n      const result = computedOffsetXValueWithAutoFillData({\n        value,\n        size,\n        rawDataLength: 3,\n        loop: true,\n        autoFillData: false,\n      });\n\n      expect(result).toBe(value);\n    });\n\n    it(\"should return original value when loop is false\", () => {\n      const value = size * 2;\n      const result = computedOffsetXValueWithAutoFillData({\n        value,\n        size,\n        rawDataLength: 3,\n        loop: false,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(value);\n    });\n  });\n\n  describe(\"computedRealIndexWithAutoFillData\", () => {\n    it(\"should handle single item\", () => {\n      const result = computedRealIndexWithAutoFillData({\n        index: 2,\n        dataLength: SINGLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(0); // index % 1\n    });\n\n    it(\"should handle double items\", () => {\n      const result = computedRealIndexWithAutoFillData({\n        index: 3,\n        dataLength: DOUBLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(1); // index % 2\n    });\n\n    it(\"should return original index when autoFillData is false\", () => {\n      const index = 2;\n      const result = computedRealIndexWithAutoFillData({\n        index,\n        dataLength: 3,\n        loop: true,\n        autoFillData: false,\n      });\n\n      expect(result).toBe(index);\n    });\n\n    it(\"should return original index when loop is false\", () => {\n      const index = 2;\n      const result = computedRealIndexWithAutoFillData({\n        index,\n        dataLength: 3,\n        loop: false,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(index);\n    });\n  });\n\n  describe(\"convertToSharedIndex\", () => {\n    it(\"should handle single item\", () => {\n      const result = convertToSharedIndex({\n        index: 2,\n        rawDataLength: SINGLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(0);\n    });\n\n    it(\"should handle double items\", () => {\n      const result = convertToSharedIndex({\n        index: 3,\n        rawDataLength: DOUBLE_ITEM,\n        loop: true,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(1); // index % 2\n    });\n\n    it(\"should return original index when autoFillData is false\", () => {\n      const index = 2;\n      const result = convertToSharedIndex({\n        index,\n        rawDataLength: 3,\n        loop: true,\n        autoFillData: false,\n      });\n\n      expect(result).toBe(index);\n    });\n\n    it(\"should return original index when loop is false\", () => {\n      const index = 2;\n      const result = convertToSharedIndex({\n        index,\n        rawDataLength: 3,\n        loop: false,\n        autoFillData: true,\n      });\n\n      expect(result).toBe(index);\n    });\n  });\n});\n"]}