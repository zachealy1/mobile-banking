"use strict";

var _reactNativeReanimated = require("react-native-reanimated");

var _dealWithAnimation = require("./deal-with-animation");

// Mock Reanimated
jest.mock("react-native-reanimated", () => ({
  withSpring: jest.fn((value, _config, callback) => {
    callback === null || callback === void 0 ? void 0 : callback(true);
    return value;
  }),
  withTiming: jest.fn((value, _config, callback) => {
    callback === null || callback === void 0 ? void 0 : callback(true);
    return value;
  })
}));
describe("dealWithAnimation", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  it("should handle spring animation", () => {
    const callback = jest.fn();
    const springConfig = {
      damping: 20,
      stiffness: 90
    };
    const animation = (0, _dealWithAnimation.dealWithAnimation)({
      type: "spring",
      config: springConfig
    });
    const result = animation(100, callback);
    expect(_reactNativeReanimated.withSpring).toHaveBeenCalledWith(100, springConfig, expect.any(Function));
    expect(callback).toHaveBeenCalledWith(true);
    expect(result).toBe(100);
  });
  it("should handle timing animation", () => {
    const callback = jest.fn();
    const timingConfig = {
      duration: 300
    };
    const animation = (0, _dealWithAnimation.dealWithAnimation)({
      type: "timing",
      config: timingConfig
    });
    const result = animation(100, callback);
    expect(_reactNativeReanimated.withTiming).toHaveBeenCalledWith(100, timingConfig, expect.any(Function));
    expect(callback).toHaveBeenCalledWith(true);
    expect(result).toBe(100);
  });
  it("should pass animation config correctly", () => {
    const springConfig = {
      damping: 10,
      mass: 1,
      stiffness: 100
    };
    const animation = (0, _dealWithAnimation.dealWithAnimation)({
      type: "spring",
      config: springConfig
    });
    animation(100, jest.fn());
    expect(_reactNativeReanimated.withSpring).toHaveBeenCalledWith(100, expect.objectContaining(springConfig), expect.any(Function));
  });
  it("should handle animation completion", () => {
    const callback = jest.fn();
    const animation = (0, _dealWithAnimation.dealWithAnimation)({
      type: "timing",
      config: {
        duration: 300
      }
    });
    animation(100, callback);
    expect(callback).toHaveBeenCalledWith(true);
  });
});
//# sourceMappingURL=deal-with-animation.test.js.map