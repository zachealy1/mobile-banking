{"version":3,"sources":["handleroffset-direction.test.ts"],"names":["describe","it","result","handlerOffsetAnimVal","expect","current","toBe"],"mappings":";;AAAA;;AAEA;;AAEA;;AAEAA,QAAQ,CAAC,wBAAD,EAA2B,MAAM;AACvCC,EAAAA,EAAE,CAAC,oDAAD,EAAuD,MAAM;AAC7D,UAAMC,MAAM,GAAG,4BAAW,MAAM;AAC9B,YAAMC,oBAAoB,GAAG,2CAAe,CAAf,CAA7B;AACA,aAAO,oDAAuBA,oBAAvB,CAAP;AACD,KAHc,CAAf;AAKAC,IAAAA,MAAM,CAACF,MAAM,CAACA,MAAP,CAAcG,OAAf,CAAN,CAA8BC,IAA9B,CAAmC,CAAC,CAApC;AACD,GAPC,CAAF;AASAL,EAAAA,EAAE,CAAC,yDAAD,EAA4D,MAAM;AAClE,UAAMC,MAAM,GAAG,4BAAW,MAAM;AAC9B,YAAMC,oBAAoB,GAAG,2CAAe,CAAf,CAA7B;AACA,aAAO,oDAAuBA,oBAAvB,CAAP;AACD,KAHc,CAAf;AAKAC,IAAAA,MAAM,CAACF,MAAM,CAACA,MAAP,CAAcG,OAAf,CAAN,CAA8BC,IAA9B,CAAmC,CAAnC;AACD,GAPC,CAAF;AASAL,EAAAA,EAAE,CAAC,uDAAD,EAA0D,MAAM;AAChE,UAAMC,MAAM,GAAG,4BAAW,MAAM;AAC9B,YAAMC,oBAAoB,GAAG,2CAAe,CAAC,CAAhB,CAA7B;AACA,aAAO,oDAAuBA,oBAAvB,CAAP;AACD,KAHc,CAAf;AAKAC,IAAAA,MAAM,CAACF,MAAM,CAACA,MAAP,CAAcG,OAAf,CAAN,CAA8BC,IAA9B,CAAmC,CAAC,CAApC;AACD,GAPC,CAAF;AASAL,EAAAA,EAAE,CAAC,kFAAD,EAAqF,MAAM;AAC3F,UAAMC,MAAM,GAAG,4BAAW,MAAM;AAC9B,YAAMC,oBAAoB,GAAG,2CAAe,CAAC,CAAhB,CAA7B;AACA,aAAO,oDAAuBA,oBAAvB,EAA6C,UAA7C,CAAP;AACD,KAHc,CAAf;AAKAC,IAAAA,MAAM,CAACF,MAAM,CAACA,MAAP,CAAcG,OAAf,CAAN,CAA8BC,IAA9B,CAAmC,CAAnC;AACD,GAPC,CAAF;AASAL,EAAAA,EAAE,CAAC,yFAAD,EAA4F,MAAM;AAClG,UAAMC,MAAM,GAAG,4BAAW,MAAM;AAC9B,YAAMC,oBAAoB,GAAG,2CAAe,CAAf,CAA7B;AACA,aAAO,oDAAuBA,oBAAvB,EAA6C,UAA7C,CAAP;AACD,KAHc,CAAf;AAKAC,IAAAA,MAAM,CAACF,MAAM,CAACA,MAAP,CAAcG,OAAf,CAAN,CAA8BC,IAA9B,CAAmC,CAAC,CAApC;AACD,GAPC,CAAF;AAQD,CA7CO,CAAR","sourcesContent":["import { useSharedValue } from \"react-native-reanimated\";\n\nimport { renderHook } from \"@testing-library/react-hooks\";\n\nimport { handlerOffsetDirection } from \"./handleroffset-direction\";\n\ndescribe(\"handlerOffsetDirection\", () => {\n  it(\"should return -1 when default value equals to zero\", () => {\n    const result = renderHook(() => {\n      const handlerOffsetAnimVal = useSharedValue(0);\n      return handlerOffsetDirection(handlerOffsetAnimVal);\n    });\n\n    expect(result.result.current).toBe(-1);\n  });\n\n  it(\"should return 1 when default value is greater than zero\", () => {\n    const result = renderHook(() => {\n      const handlerOffsetAnimVal = useSharedValue(1);\n      return handlerOffsetDirection(handlerOffsetAnimVal);\n    });\n\n    expect(result.result.current).toBe(1);\n  });\n\n  it(\"should return -1 when default value is less than zero\", () => {\n    const result = renderHook(() => {\n      const handlerOffsetAnimVal = useSharedValue(-1);\n      return handlerOffsetDirection(handlerOffsetAnimVal);\n    });\n\n    expect(result.result.current).toBe(-1);\n  });\n\n  it(\"should return 1 when default value equals to zero and fixedDirection is negative\", () => {\n    const result = renderHook(() => {\n      const handlerOffsetAnimVal = useSharedValue(-1);\n      return handlerOffsetDirection(handlerOffsetAnimVal, \"positive\");\n    });\n\n    expect(result.result.current).toBe(1);\n  });\n\n  it(\"should return -1 when default value is greater than zero and fixedDirection is negative\", () => {\n    const result = renderHook(() => {\n      const handlerOffsetAnimVal = useSharedValue(1);\n      return handlerOffsetDirection(handlerOffsetAnimVal, \"negative\");\n    });\n\n    expect(result.result.current).toBe(-1);\n  });\n});\n"]}