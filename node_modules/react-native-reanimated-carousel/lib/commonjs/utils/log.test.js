"use strict";

var _log = require("./log");

describe("log utilities", () => {
  describe("log", () => {
    const mockConsoleLog = jest.fn();
    const originalConsoleLog = console.log;
    beforeEach(() => {
      console.log = mockConsoleLog;
    });
    afterEach(() => {
      mockConsoleLog.mockClear();
      console.log = originalConsoleLog;
    });
    it("should call console.log with provided arguments", () => {
      const args = ["test", 123, {
        key: "value"
      }];
      (0, _log.log)(...args);
      expect(mockConsoleLog).toHaveBeenCalledWith(...args);
    });
    it("should handle single argument", () => {
      (0, _log.log)("test");
      expect(mockConsoleLog).toHaveBeenCalledWith("test");
    });
    it("should handle multiple arguments", () => {
      (0, _log.log)("test", 123, true);
      expect(mockConsoleLog).toHaveBeenCalledWith("test", 123, true);
    });
  });
  describe("round", () => {
    it("should round positive numbers correctly", () => {
      expect((0, _log.round)(1.4)).toBe(1);
      expect((0, _log.round)(1.5)).toBe(2);
      expect((0, _log.round)(1.6)).toBe(2);
    });
    it("should round negative numbers correctly", () => {
      expect((0, _log.round)(-1.4)).toBe(-1);
      expect((0, _log.round)(-1.5)).toBe(-1);
      expect((0, _log.round)(-1.6)).toBe(-2);
    });
    it("should handle zero values", () => {
      expect((0, _log.round)(0)).toBe(0);
      expect((0, _log.round)(-0)).toBe(-0);
      expect(1 / (0, _log.round)(-0)).toBe(Number.NEGATIVE_INFINITY);
    });
    it("should handle integers", () => {
      expect((0, _log.round)(5)).toBe(5);
      expect((0, _log.round)(-5)).toBe(-5);
    });
    it("should handle decimal places", () => {
      expect((0, _log.round)(Math.PI)).toBe(3);
      expect((0, _log.round)(-Math.PI)).toBe(-3);
    });
  });
});
//# sourceMappingURL=log.test.js.map