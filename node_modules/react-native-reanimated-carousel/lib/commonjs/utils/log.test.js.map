{"version":3,"sources":["log.test.ts"],"names":["describe","mockConsoleLog","jest","fn","originalConsoleLog","console","log","beforeEach","afterEach","mockClear","it","args","key","expect","toHaveBeenCalledWith","toBe","Number","NEGATIVE_INFINITY","Math","PI"],"mappings":"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","sourcesContent":["import { log, round } from \"./log\";\n\ndescribe(\"log utilities\", () => {\n  describe(\"log\", () => {\n    const mockConsoleLog = jest.fn();\n    const originalConsoleLog = console.log;\n\n    beforeEach(() => {\n      console.log = mockConsoleLog;\n    });\n\n    afterEach(() => {\n      mockConsoleLog.mockClear();\n      console.log = originalConsoleLog;\n    });\n\n    it(\"should call console.log with provided arguments\", () => {\n      const args = [\"test\", 123, { key: \"value\" }];\n      log(...args);\n\n      expect(mockConsoleLog).toHaveBeenCalledWith(...args);\n    });\n\n    it(\"should handle single argument\", () => {\n      log(\"test\");\n      expect(mockConsoleLog).toHaveBeenCalledWith(\"test\");\n    });\n\n    it(\"should handle multiple arguments\", () => {\n      log(\"test\", 123, true);\n      expect(mockConsoleLog).toHaveBeenCalledWith(\"test\", 123, true);\n    });\n  });\n\n  describe(\"round\", () => {\n    it(\"should round positive numbers correctly\", () => {\n      expect(round(1.4)).toBe(1);\n      expect(round(1.5)).toBe(2);\n      expect(round(1.6)).toBe(2);\n    });\n\n    it(\"should round negative numbers correctly\", () => {\n      expect(round(-1.4)).toBe(-1);\n      expect(round(-1.5)).toBe(-1);\n      expect(round(-1.6)).toBe(-2);\n    });\n\n    it(\"should handle zero values\", () => {\n      expect(round(0)).toBe(0);\n      expect(round(-0)).toBe(-0);\n      expect(1 / round(-0)).toBe(Number.NEGATIVE_INFINITY);\n    });\n\n    it(\"should handle integers\", () => {\n      expect(round(5)).toBe(5);\n      expect(round(-5)).toBe(-5);\n    });\n\n    it(\"should handle decimal places\", () => {\n      expect(round(Math.PI)).toBe(3);\n      expect(round(-Math.PI)).toBe(-3);\n    });\n  });\n});\n"]}