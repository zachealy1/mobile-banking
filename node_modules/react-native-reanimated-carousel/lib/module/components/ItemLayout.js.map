{"version":3,"sources":["ItemLayout.tsx"],"names":["React","Animated","useAnimatedStyle","useDerivedValue","useOffsetX","useGlobalState","ItemLayout","props","handlerOffset","index","children","visibleRanges","animationStyle","loop","dataLength","width","height","vertical","customConfig","mode","modeConfig","size","offsetXConfig","snapDirection","showLength","type","viewCount","x","animationValue","value","animatedStyle","position"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAOC,QAAP,IAAmBC,gBAAnB,EAAqCC,eAArC,QAA4D,yBAA5D;AAGA,SAASC,UAAT,QAA2B,qBAA3B;AAGA,SAASC,cAAT,QAA+B,UAA/B;AAIA,OAAO,MAAMC,UAQX,GAAIC,KAAD,IAAW;AACd,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA,QAAxB;AAAkCC,IAAAA,aAAlC;AAAiDC,IAAAA;AAAjD,MAAoEL,KAA1E;AAEA,QAAM;AACJA,IAAAA,KAAK,EAAE;AAAEM,MAAAA,IAAF;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA,KAApB;AAA2BC,MAAAA,MAA3B;AAAmCC,MAAAA,QAAnC;AAA6CC,MAAAA,YAA7C;AAA2DC,MAAAA,IAA3D;AAAiEC,MAAAA;AAAjE,KADH,CAEJ;AACA;;AAHI,MAIFf,cAAc,EAJlB;AAMA,QAAMgB,IAAI,GAAGJ,QAAQ,GAAGD,MAAH,GAAYD,KAAjC;AAEA,MAAIO,aAAoB,GAAG;AACzBd,IAAAA,aADyB;AAEzBC,IAAAA,KAFyB;AAGzBY,IAAAA,IAHyB;AAIzBP,IAAAA,UAJyB;AAKzBD,IAAAA,IALyB;AAMzB,QAAI,OAAOK,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsD,EAA1D;AANyB,GAA3B;;AASA,MAAIC,IAAI,KAAK,kBAAb,EAAiC;AAC/B,UAAM;AAAEI,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAAgCJ,UAAtC;AAEAE,IAAAA,aAAa,GAAG;AACdd,MAAAA,aADc;AAEdC,MAAAA,KAFc;AAGdY,MAAAA,IAHc;AAIdP,MAAAA,UAJc;AAKdD,MAAAA,IALc;AAMdY,MAAAA,IAAI,EAAEF,aAAa,KAAK,OAAlB,GAA4B,UAA5B,GAAyC,UANjC;AAOdG,MAAAA,SAAS,EAAEF;AAPG,KAAhB;AASD;;AAED,QAAMG,CAAC,GAAGvB,UAAU,CAACkB,aAAD,EAAgBX,aAAhB,CAApB;AACA,QAAMiB,cAAc,GAAGzB,eAAe,CAAC,MAAMwB,CAAC,CAACE,KAAF,GAAUR,IAAjB,EAAuB,CAACM,CAAD,EAAIN,IAAJ,CAAvB,CAAtC;AACA,QAAMS,aAAa,GAAG5B,gBAAgB,CACpC,MAAMU,cAAc,CAACe,CAAC,CAACE,KAAF,GAAUR,IAAX,CADgB,EAEpC,CAACT,cAAD,CAFoC,CAAtC,CApCc,CAyCd;AACA;AACA;AACA;AACA;;AAEA,sBACE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACL;AACEG,MAAAA,KAAK,EAAEA,KAAK,IAAI,MADlB;AAEEC,MAAAA,MAAM,EAAEA,MAAM,IAAI,MAFpB;AAGEe,MAAAA,QAAQ,EAAE;AAHZ,KADK,EAMLD,aANK,CADT,CASE;;AACA;AACN;AACA;AACA;AACA;AAdI;AAeE,IAAA,MAAM,EAAG,mBAAkBrB,KAAM;AAfnC,KAiBGC,QAAQ,CAAC;AAAEkB,IAAAA;AAAF,GAAD,CAjBX,CADF;AAqBD,CA5EM","sourcesContent":["import React from \"react\";\nimport type { ViewStyle } from \"react-native\";\nimport type { SharedValue } from \"react-native-reanimated\";\nimport Animated, { useAnimatedStyle, useDerivedValue } from \"react-native-reanimated\";\n\nimport type { IOpts } from \"../hooks/useOffsetX\";\nimport { useOffsetX } from \"../hooks/useOffsetX\";\nimport type { IVisibleRanges } from \"../hooks/useVisibleRanges\";\nimport type { ILayoutConfig } from \"../layouts/stack\";\nimport { useGlobalState } from \"../store\";\n\nexport type TAnimationStyle = (value: number) => ViewStyle;\n\nexport const ItemLayout: React.FC<{\n  index: number;\n  handlerOffset: SharedValue<number>;\n  visibleRanges: IVisibleRanges;\n  animationStyle: TAnimationStyle;\n  children: (ctx: {\n    animationValue: Animated.SharedValue<number>;\n  }) => React.ReactElement;\n}> = (props) => {\n  const { handlerOffset, index, children, visibleRanges, animationStyle } = props;\n\n  const {\n    props: { loop, dataLength, width, height, vertical, customConfig, mode, modeConfig },\n    // TODO: For dynamic dimension in the future\n    // layout: { updateItemDimensions },\n  } = useGlobalState();\n\n  const size = vertical ? height : width;\n\n  let offsetXConfig: IOpts = {\n    handlerOffset,\n    index,\n    size,\n    dataLength,\n    loop,\n    ...(typeof customConfig === \"function\" ? customConfig() : {}),\n  };\n\n  if (mode === \"horizontal-stack\") {\n    const { snapDirection, showLength } = modeConfig as ILayoutConfig;\n\n    offsetXConfig = {\n      handlerOffset,\n      index,\n      size,\n      dataLength,\n      loop,\n      type: snapDirection === \"right\" ? \"negative\" : \"positive\",\n      viewCount: showLength,\n    };\n  }\n\n  const x = useOffsetX(offsetXConfig, visibleRanges);\n  const animationValue = useDerivedValue(() => x.value / size, [x, size]);\n  const animatedStyle = useAnimatedStyle<ViewStyle>(\n    () => animationStyle(x.value / size),\n    [animationStyle]\n  );\n\n  // TODO: For dynamic dimension in the future\n  // function handleLayout(e: LayoutChangeEvent) {\n  //   const { width, height } = e.nativeEvent.layout;\n  //   updateItemDimensions(index, { width, height });\n  // }\n\n  return (\n    <Animated.View\n      style={[\n        {\n          width: width || \"100%\",\n          height: height || \"100%\",\n          position: \"absolute\",\n        },\n        animatedStyle,\n      ]}\n      // onLayout={handleLayout}\n      /**\n       * We use this testID to know when the carousel item is ready to be tested in test.\n       * e.g.\n       *  The testID of first item will be changed to __CAROUSEL_ITEM_0_READY__ from __CAROUSEL_ITEM_0_NOT_READY__ when the item is ready.\n       * */\n      testID={`__CAROUSEL_ITEM_${index}__`}\n    >\n      {children({ animationValue })}\n    </Animated.View>\n  );\n};\n"]}