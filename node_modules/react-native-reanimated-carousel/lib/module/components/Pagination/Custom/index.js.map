{"version":3,"sources":["index.tsx"],"names":["React","View","PaginationItem","Custom","props","activeDotStyle","dotStyle","progress","horizontal","data","size","containerStyle","renderItem","onPress","customReanimatedStyle","width","height","Error","maxItemWidth","Math","max","maxItemHeight","justifyContent","alignSelf","minWidth","minHeight","flexDirection","map","item","index","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,IAAT,QAAqB,cAArB;AAMA,SAASC,cAAT,QAA+B,kBAA/B;AAeA,OAAO,MAAMC,MAAM,GAAkBC,KAAf,IAAwC;AAAA;;AAC5D,QAAM;AACJC,IAAAA,cADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,UAAU,GAAG,IAJT;AAKJC,IAAAA,IALI;AAMJC,IAAAA,IANI;AAOJC,IAAAA,cAPI;AAQJC,IAAAA,UARI;AASJC,IAAAA,OATI;AAUJC,IAAAA;AAVI,MAWFV,KAXJ;AAaA,MACE,OAAOM,IAAP,KAAgB,QAAhB,IACA,QAAOJ,QAAP,aAAOA,QAAP,uBAAOA,QAAQ,CAAES,KAAjB,MAA2B,QAD3B,IAEA,QAAOT,QAAP,aAAOA,QAAP,uBAAOA,QAAQ,CAAEU,MAAjB,MAA4B,QAF5B,IAGA,QAAOX,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAEU,KAAvB,MAAiC,QAHjC,IAIA,QAAOV,cAAP,aAAOA,cAAP,uBAAOA,cAAc,CAAEW,MAAvB,MAAkC,QALpC,EAOE,MAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AAEF,QAAMC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASV,IAAT,aAASA,IAAT,cAASA,IAAT,GAAiB,CAAjB,qBAAoBJ,QAApB,aAAoBA,QAApB,uBAAoBA,QAAQ,CAAES,KAA9B,6DAAuC,CAAvC,2BAA0CV,cAA1C,aAA0CA,cAA1C,uBAA0CA,cAAc,CAAEU,KAA1D,yEAAmE,CAAnE,CAArB;AACA,QAAMM,aAAa,GAAGF,IAAI,CAACC,GAAL,CAASV,IAAT,aAASA,IAAT,cAASA,IAAT,GAAiB,CAAjB,sBAAoBJ,QAApB,aAAoBA,QAApB,uBAAoBA,QAAQ,CAAEU,MAA9B,+DAAwC,CAAxC,2BAA2CX,cAA3C,aAA2CA,cAA3C,uBAA2CA,cAAc,CAAEW,MAA3D,yEAAqE,CAArE,CAAtB;AAEA,sBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CACL;AACEM,MAAAA,cAAc,EAAE,eADlB;AAEEC,MAAAA,SAAS,EAAE,QAFb;AAGEC,MAAAA,QAAQ,EAAEN,YAHZ;AAIEO,MAAAA,SAAS,EAAEJ;AAJb,KADK,EAOLb,UAAU,GACN;AACEkB,MAAAA,aAAa,EAAE;AADjB,KADM,GAIN;AACEA,MAAAA,aAAa,EAAE;AADjB,KAXC,EAcLf,cAdK;AADT,KAkBGF,IAAI,CAACkB,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzB,wBACE,oBAAC,cAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,KAAK,EAAEA,KAFT;AAGE,MAAA,IAAI,EAAEnB,IAHR;AAIE,MAAA,KAAK,EAAED,IAAI,CAACqB,MAJd;AAKE,MAAA,QAAQ,EAAExB,QALZ;AAME,MAAA,SAAS,EAAEC,QANb;AAOE,MAAA,UAAU,EAAE,CAACC,UAPf;AAQE,MAAA,cAAc,EAAEH,cARlB;AASE,MAAA,qBAAqB,EAAES,qBATzB;AAUE,MAAA,OAAO,EAAE,MAAMD,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAGgB,KAAH;AAVxB,OAYGjB,UAZH,aAYGA,UAZH,uBAYGA,UAAU,CAAGgB,IAAH,EAASC,KAAT,CAZb,CADF;AAgBD,GAjBA,CAlBH,CADF;AAuCD,CAjEM","sourcesContent":["import React from \"react\";\nimport type { StyleProp, ViewStyle } from \"react-native\";\nimport { View } from \"react-native\";\nimport type { SharedValue } from \"react-native-reanimated\";\n\nimport type { DefaultStyle } from \"react-native-reanimated/lib/typescript/reanimated2/hook/commonTypes\";\n\nimport type { DotStyle } from \"./PaginationItem\";\nimport { PaginationItem } from \"./PaginationItem\";\n\nexport interface ShapeProps<T extends {}> {\n  progress: SharedValue<number>;\n  horizontal?: boolean;\n  data: Array<T>;\n  renderItem?: (item: T, index: number) => React.ReactNode;\n  containerStyle?: StyleProp<ViewStyle>;\n  dotStyle?: DotStyle;\n  activeDotStyle?: DotStyle;\n  size?: number;\n  onPress?: (index: number) => void;\n  customReanimatedStyle?: (progress: number, index: number, length: number) => DefaultStyle;\n}\n\nexport const Custom = <T extends {}>(props: ShapeProps<T>) => {\n  const {\n    activeDotStyle,\n    dotStyle,\n    progress,\n    horizontal = true,\n    data,\n    size,\n    containerStyle,\n    renderItem,\n    onPress,\n    customReanimatedStyle,\n  } = props;\n\n  if (\n    typeof size === \"string\" ||\n    typeof dotStyle?.width === \"string\" ||\n    typeof dotStyle?.height === \"string\" ||\n    typeof activeDotStyle?.width === \"string\" ||\n    typeof activeDotStyle?.height === \"string\"\n  )\n    throw new Error(\"size/width/height must be a number\");\n\n  const maxItemWidth = Math.max(size ?? 0, dotStyle?.width ?? 0, activeDotStyle?.width ?? 0);\n  const maxItemHeight = Math.max(size ?? 0, dotStyle?.height ?? 0, activeDotStyle?.height ?? 0);\n\n  return (\n    <View\n      style={[\n        {\n          justifyContent: \"space-between\",\n          alignSelf: \"center\",\n          minWidth: maxItemWidth,\n          minHeight: maxItemHeight,\n        },\n        horizontal\n          ? {\n              flexDirection: \"row\",\n            }\n          : {\n              flexDirection: \"column\",\n            },\n        containerStyle,\n      ]}\n    >\n      {data.map((item, index) => {\n        return (\n          <PaginationItem\n            key={index}\n            index={index}\n            size={size}\n            count={data.length}\n            dotStyle={dotStyle}\n            animValue={progress}\n            horizontal={!horizontal}\n            activeDotStyle={activeDotStyle}\n            customReanimatedStyle={customReanimatedStyle}\n            onPress={() => onPress?.(index)}\n          >\n            {renderItem?.(item, index)}\n          </PaginationItem>\n        );\n      })}\n    </View>\n  );\n};\n"]}