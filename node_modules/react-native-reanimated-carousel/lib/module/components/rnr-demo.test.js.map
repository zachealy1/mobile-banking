{"version":3,"sources":["rnr-demo.test.tsx"],"names":["React","Animated","useAnimatedStyle","useDerivedValue","renderer","describe","it","initialValue","updatedValue","TestComponent","props","opacity","value","animatedStyle","wrapper","create","expect","root","children","style","jestAnimatedStyle","current","toBe","update"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,IAAmBC,gBAAnB,EAAqCC,eAArC,QAA4D,yBAA5D;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BC,EAAAA,EAAE,CAAC,2BAAD,EAA8B,MAAM;AACpC,UAAMC,YAAY,GAAG,CAArB;AACA,UAAMC,YAAY,GAAG,CAArB;;AAOA,UAAMC,aAAwB,GAAIC,KAAD,IAAW;AAC1C,YAAMC,OAAO,GAAGR,eAAe,CAAC,MAAMO,KAAK,CAACE,KAAb,EAAoB,CAACF,KAAK,CAACE,KAAP,CAApB,CAA/B;AACA,YAAMC,aAAa,GAAGX,gBAAgB,CACpC,OAAO;AACLS,QAAAA,OAAO,EAAEA,OAAO,CAACC;AADZ,OAAP,CADoC,EAIpC,CAACD,OAAD,CAJoC,CAAtC;AAOA,0BAAO,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAEE;AAAtB,QAAP;AACD,KAVD,CAToC,CAqBpC;;;AACA,UAAMC,OAAO,GAAGV,QAAQ,CAACW,MAAT,eAAgB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,KAAnB;AAAyB,MAAA,KAAK,EAAER;AAAhC,MAAhB,CAAhB;AAEAS,IAAAA,MAAM,CACJ,OAAOF,OAAO,CAACG,IAAR,CAAaC,QAAb,CAAsB,CAAtB,CAAP,KAAoC,QAApC,GACIJ,OAAO,CAACG,IAAR,CAAaC,QAAb,CAAsB,CAAtB,EAAyBR,KAAzB,CAA+BS,KAA/B,CAAqCC,iBAArC,CAAuDC,OAAvD,CAA+DT,KAA/D,CAAqED,OADzE,GAEI,KAHA,CAAN,CAIEW,IAJF,CAIOf,YAJP,EAxBoC,CA8BpC;;AACAO,IAAAA,OAAO,CAACS,MAAR,eAAe,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,KAAnB;AAAyB,MAAA,KAAK,EAAEf;AAAhC,MAAf;AAEAQ,IAAAA,MAAM,CACJ,OAAOF,OAAO,CAACG,IAAR,CAAaC,QAAb,CAAsB,CAAtB,CAAP,KAAoC,QAApC,GACIJ,OAAO,CAACG,IAAR,CAAaC,QAAb,CAAsB,CAAtB,EAAyBR,KAAzB,CAA+BS,KAA/B,CAAqCC,iBAArC,CAAuDC,OAAvD,CAA+DT,KAA/D,CAAqED,OADzE,GAEI,KAHA,CAAN,CAIEW,IAJF,CAIOf,YAJP;AAKD,GAtCC,CAAF;AAuCD,CAxCO,CAAR","sourcesContent":["import type { FC } from \"react\";\nimport React from \"react\";\nimport Animated, { useAnimatedStyle, useDerivedValue } from \"react-native-reanimated\";\nimport renderer from \"react-test-renderer\";\n\ndescribe(\"useSharedValue\", () => {\n  it(\"retains value on rerender\", () => {\n    const initialValue = 0;\n    const updatedValue = 1;\n\n    interface Props {\n      key: string;\n      value: number;\n    }\n\n    const TestComponent: FC<Props> = (props) => {\n      const opacity = useDerivedValue(() => props.value, [props.value]);\n      const animatedStyle = useAnimatedStyle(\n        () => ({\n          opacity: opacity.value,\n        }),\n        [opacity]\n      );\n\n      return <Animated.View style={animatedStyle} />;\n    };\n\n    // When rendering with initial value\n    const wrapper = renderer.create(<TestComponent key=\"box\" value={initialValue} />);\n\n    expect(\n      typeof wrapper.root.children[0] !== \"string\"\n        ? wrapper.root.children[0].props.style.jestAnimatedStyle.current.value.opacity\n        : false\n    ).toBe(initialValue);\n\n    // When rendering with updated value\n    wrapper.update(<TestComponent key=\"box\" value={updatedValue} />);\n\n    expect(\n      typeof wrapper.root.children[0] !== \"string\"\n        ? wrapper.root.children[0].props.style.jestAnimatedStyle.current.value.opacity\n        : false\n    ).toBe(initialValue);\n  });\n});\n"]}