{"version":3,"sources":["useCarouselController.tsx"],"names":["React","useRef","runOnJS","useAnimatedReaction","useSharedValue","Easing","useGlobalState","computedRealIndexWithAutoFillData","convertToSharedIndex","dealWithAnimation","handlerOffsetDirection","round","useCarouselController","options","ref","size","loop","dataLength","handlerOffset","withAnimation","defaultIndex","duration","autoFillData","fixedDirection","globalState","props","overscrollEnabled","layout","containerSize","dataInfo","useMemo","length","disable","originalLength","index","sharedIndex","sharedPreIndex","currentFixedPage","useCallback","Math","value","fixed","abs","setSharedIndex","newSharedIndex","current","handlerOffsetValue","toInt","isPositive","i","newSharedIndexValue","rawDataLength","getCurrentIndex","realIndex","canSliding","onScrollEnd","onScrollStart","scrollWithTiming","toValue","onFinished","callback","isFinished","defaultWithAnimation","type","config","easing","easeOutQuart","next","opts","count","animated","visibleContentWidth","width","nextPage","prev","prevPage","to","direction","offset","totalSize","isCloseToNextLoop","finalOffset","floor","scrollTo","n","useImperativeHandle","getSharedIndex"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\nimport { SharedValue, runOnJS, useAnimatedReaction, useSharedValue } from \"react-native-reanimated\";\n\nimport { Easing } from \"../constants\";\nimport { useGlobalState } from \"../store\";\nimport type {\n  ICarouselInstance,\n  TCarouselActionOptions,\n  TCarouselProps,\n  WithTimingAnimation,\n} from \"../types\";\nimport {\n  computedRealIndexWithAutoFillData,\n  convertToSharedIndex,\n} from \"../utils/computed-with-auto-fill-data\";\nimport { dealWithAnimation } from \"../utils/deal-with-animation\";\nimport { handlerOffsetDirection } from \"../utils/handleroffset-direction\";\nimport { round } from \"../utils/log\";\n\ninterface IOpts {\n  ref: React.ForwardedRef<ICarouselInstance>;\n  loop: boolean;\n  size: number;\n  dataLength: number;\n  handlerOffset: SharedValue<number>;\n  autoFillData: TCarouselProps[\"autoFillData\"];\n  withAnimation?: TCarouselProps[\"withAnimation\"];\n  fixedDirection?: TCarouselProps[\"fixedDirection\"];\n  duration?: number;\n  defaultIndex?: number;\n  onScrollStart?: () => void;\n  onScrollEnd?: () => void;\n}\n\nexport interface ICarouselController {\n  getSharedIndex: () => number;\n  prev: (opts?: TCarouselActionOptions) => void;\n  next: (opts?: TCarouselActionOptions) => void;\n  getCurrentIndex: () => number;\n  scrollTo: (opts?: TCarouselActionOptions) => void;\n  index: SharedValue<number>;\n}\n\nexport function useCarouselController(options: IOpts): ICarouselController {\n  const {\n    ref,\n    size,\n    loop,\n    dataLength,\n    handlerOffset,\n    withAnimation,\n    defaultIndex = 0,\n    duration,\n    autoFillData,\n    fixedDirection,\n  } = options;\n\n  const globalState = useGlobalState();\n\n  const {\n    props: { overscrollEnabled },\n    layout: { containerSize },\n  } = globalState;\n\n  const dataInfo = React.useMemo(\n    () => ({\n      length: dataLength,\n      disable: !dataLength,\n      originalLength: dataLength,\n    }),\n    [dataLength]\n  );\n\n  const index = useSharedValue<number>(defaultIndex);\n  // The Index displayed to the user\n  const sharedIndex = useRef<number>(defaultIndex);\n  const sharedPreIndex = useRef<number>(defaultIndex);\n\n  const currentFixedPage = React.useCallback(() => {\n    if (loop) return -Math.round(handlerOffset.value / size);\n\n    const fixed = (handlerOffset.value / size) % dataInfo.length;\n    return Math.round(\n      handlerOffset.value <= 0 ? Math.abs(fixed) : Math.abs(fixed > 0 ? dataInfo.length - fixed : 0)\n    );\n  }, [handlerOffset, dataInfo, size, loop]);\n\n  function setSharedIndex(newSharedIndex: number) {\n    sharedIndex.current = newSharedIndex;\n  }\n\n  useAnimatedReaction(\n    () => {\n      const handlerOffsetValue = handlerOffset.value;\n      const toInt = round(handlerOffsetValue / size) % dataInfo.length;\n      const isPositive = handlerOffsetValue <= 0;\n      const i = isPositive ? Math.abs(toInt) : Math.abs(toInt > 0 ? dataInfo.length - toInt : 0);\n\n      const newSharedIndexValue = convertToSharedIndex({\n        loop,\n        rawDataLength: dataInfo.originalLength,\n        autoFillData: autoFillData!,\n        index: i,\n      });\n\n      return {\n        i,\n        newSharedIndexValue,\n      };\n    },\n    ({ i, newSharedIndexValue }) => {\n      index.value = i;\n      runOnJS(setSharedIndex)(newSharedIndexValue);\n    },\n    [sharedPreIndex, sharedIndex, size, dataInfo, index, loop, autoFillData, handlerOffset]\n  );\n\n  const getCurrentIndex = React.useCallback(() => {\n    const realIndex = computedRealIndexWithAutoFillData({\n      index: index.value,\n      dataLength: dataInfo.originalLength,\n      loop,\n      autoFillData: autoFillData!,\n    });\n\n    return realIndex;\n  }, [index, autoFillData, dataInfo, loop]);\n\n  const canSliding = React.useCallback(() => {\n    return !dataInfo.disable;\n  }, [dataInfo]);\n\n  const onScrollEnd = React.useCallback(() => {\n    options.onScrollEnd?.();\n  }, [options]);\n\n  const onScrollStart = React.useCallback(() => {\n    options.onScrollStart?.();\n  }, [options]);\n\n  const scrollWithTiming = React.useCallback(\n    (toValue: number, onFinished?: () => void) => {\n      \"worklet\";\n      const callback = (isFinished: boolean) => {\n        \"worklet\";\n        if (isFinished) {\n          runOnJS(onScrollEnd)();\n          onFinished && runOnJS(onFinished)();\n        }\n      };\n\n      const defaultWithAnimation: WithTimingAnimation = {\n        type: \"timing\",\n        config: { duration, easing: Easing.easeOutQuart },\n      };\n\n      return dealWithAnimation(withAnimation ?? defaultWithAnimation)(toValue, callback);\n    },\n    [duration, withAnimation, onScrollEnd]\n  );\n\n  const next = React.useCallback(\n    (opts: TCarouselActionOptions = {}) => {\n      \"worklet\";\n      const { count = 1, animated = true, onFinished } = opts;\n      if (!canSliding()) return;\n\n      if (!loop && index.value >= dataInfo.length - 1) return;\n\n      /* \n      [Overscroll Protection Logic]\n      \n      This section handles the overscroll protection when overscrollEnabled is false.\n      It prevents scrolling beyond the visible content area.\n\n      Example scenario:\n      - Container width: 300px\n      - Item width: 75px (4 items per view)\n      - Total items: 6\n      \n      Initial state (index = 0):\n      [0][1][2][3] | [4][5]\n      visible      | remaining\n\n      After 2 slides (index = 2):\n      [0][1] | [2][3][4][5]\n      hidden | visible\n\n      The visibleContentWidth calculation:\n      - At index 2, remaining items = 4 (items 2,3,4,5)\n      - visibleContentWidth = 4 * 75px = 300px\n      \n      If we try to slide again:\n      - New visibleContentWidth would be: 2 * 75px = 150px (only items 4,5 remain)\n      - Since 150px < container width (300px), the slide is prevented\n      \n      This ensures we don't scroll beyond the last set of fully visible items,\n      maintaining a clean UX without partial item visibility at the edges.\n      */\n      const visibleContentWidth = (dataInfo.length - index.value) * size;\n      if (!overscrollEnabled && !(visibleContentWidth > containerSize.value.width)) {\n        return;\n      }\n\n      onScrollStart?.();\n\n      const nextPage = currentFixedPage() + count;\n      index.value = nextPage;\n\n      if (animated) {\n        handlerOffset.value = scrollWithTiming(-nextPage * size, onFinished) as any;\n      } else {\n        handlerOffset.value = -nextPage * size;\n        onFinished?.();\n      }\n    },\n    [\n      canSliding,\n      loop,\n      index,\n      dataInfo,\n      onScrollStart,\n      handlerOffset,\n      size,\n      scrollWithTiming,\n      currentFixedPage,\n    ]\n  );\n\n  const prev = React.useCallback(\n    (opts: TCarouselActionOptions = {}) => {\n      const { count = 1, animated = true, onFinished } = opts;\n      if (!canSliding()) return;\n\n      if (!loop && index.value <= 0) return;\n\n      onScrollStart?.();\n\n      const prevPage = currentFixedPage() - count;\n      index.value = prevPage;\n\n      if (animated) {\n        handlerOffset.value = scrollWithTiming(-prevPage * size, onFinished);\n      } else {\n        handlerOffset.value = -prevPage * size;\n        onFinished?.();\n      }\n    },\n    [\n      canSliding,\n      loop,\n      index,\n      onScrollStart,\n      handlerOffset,\n      size,\n      scrollWithTiming,\n      currentFixedPage,\n    ]\n  );\n\n  const to = React.useCallback(\n    (opts: { i: number; animated: boolean; onFinished?: () => void }) => {\n      const { i, animated = false, onFinished } = opts;\n\n      if (i === index.value) return;\n\n      if (!canSliding()) return;\n\n      onScrollStart?.();\n      // direction -> 1 | -1\n      const direction = handlerOffsetDirection(handlerOffset, fixedDirection);\n\n      // target offset\n      const offset = i * size * direction;\n      // page width size * page count\n      const totalSize = dataInfo.length * size;\n\n      let isCloseToNextLoop = false;\n\n      if (loop) {\n        isCloseToNextLoop = Math.abs(handlerOffset.value % totalSize) / totalSize >= 0.5;\n      }\n\n      const finalOffset =\n        (Math.floor(Math.abs(handlerOffset.value / totalSize)) + (isCloseToNextLoop ? 1 : 0)) *\n          totalSize *\n          direction +\n        offset;\n\n      if (animated) {\n        index.value = i;\n        handlerOffset.value = scrollWithTiming(finalOffset, onFinished);\n      } else {\n        handlerOffset.value = finalOffset;\n        index.value = i;\n        onFinished?.();\n      }\n    },\n    [\n      size,\n      loop,\n      index,\n      fixedDirection,\n      handlerOffset,\n      dataInfo.length,\n      canSliding,\n      onScrollStart,\n      scrollWithTiming,\n    ]\n  );\n\n  const scrollTo = React.useCallback(\n    (opts: TCarouselActionOptions = {}) => {\n      const { index: i, count, animated = false, onFinished } = opts;\n\n      if (typeof i === \"number\" && i > -1) {\n        to({ i, animated, onFinished });\n        return;\n      }\n\n      if (!count) return;\n\n      const n = Math.round(count);\n\n      if (n < 0) prev({ count: Math.abs(n), animated, onFinished });\n      else next({ count: n, animated, onFinished });\n    },\n    [prev, next, to]\n  );\n\n  React.useImperativeHandle(\n    ref,\n    () => ({\n      next,\n      prev,\n      getCurrentIndex,\n      scrollTo,\n    }),\n    [getCurrentIndex, next, prev, scrollTo]\n  );\n\n  return {\n    next,\n    prev,\n    scrollTo,\n    getCurrentIndex,\n    getSharedIndex: () => sharedIndex.current,\n    index,\n  };\n}\n"]}