{"version":3,"sources":["useCheckMounted.test.ts"],"names":["renderHook","useCheckMounted","describe","it","result","expect","current","toBe","unmount","rerender","hook1","hook2"],"mappings":"AAAA,SAASA,UAAT,QAA2B,8BAA3B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AAEAC,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCC,EAAAA,EAAE,CAAC,wCAAD,EAA2C,MAAM;AACjD,UAAM;AAAEC,MAAAA;AAAF,QAAaJ,UAAU,CAAC,MAAMC,eAAe,EAAtB,CAA7B;AAEAI,IAAAA,MAAM,CAACD,MAAM,CAACE,OAAP,CAAeA,OAAhB,CAAN,CAA+BC,IAA/B,CAAoC,IAApC;AACD,GAJC,CAAF;AAMAJ,EAAAA,EAAE,CAAC,mCAAD,EAAsC,MAAM;AAC5C,UAAM;AAAEC,MAAAA,MAAF;AAAUI,MAAAA;AAAV,QAAsBR,UAAU,CAAC,MAAMC,eAAe,EAAtB,CAAtC;AAEAI,IAAAA,MAAM,CAACD,MAAM,CAACE,OAAP,CAAeA,OAAhB,CAAN,CAA+BC,IAA/B,CAAoC,IAApC;AAEAC,IAAAA,OAAO;AAEPH,IAAAA,MAAM,CAACD,MAAM,CAACE,OAAP,CAAeA,OAAhB,CAAN,CAA+BC,IAA/B,CAAoC,KAApC;AACD,GARC,CAAF;AAUAJ,EAAAA,EAAE,CAAC,0DAAD,EAA6D,MAAM;AACnE,UAAM;AAAEC,MAAAA,MAAF;AAAUK,MAAAA;AAAV,QAAuBT,UAAU,CAAC,MAAMC,eAAe,EAAtB,CAAvC;AAEAI,IAAAA,MAAM,CAACD,MAAM,CAACE,OAAP,CAAeA,OAAhB,CAAN,CAA+BC,IAA/B,CAAoC,IAApC;AAEAE,IAAAA,QAAQ;AAERJ,IAAAA,MAAM,CAACD,MAAM,CAACE,OAAP,CAAeA,OAAhB,CAAN,CAA+BC,IAA/B,CAAoC,IAApC;AACD,GARC,CAAF;AAUAJ,EAAAA,EAAE,CAAC,6CAAD,EAAgD,MAAM;AACtD;AACA,UAAMO,KAAK,GAAGV,UAAU,CAAC,MAAMC,eAAe,EAAtB,CAAxB;AACAI,IAAAA,MAAM,CAACK,KAAK,CAACN,MAAN,CAAaE,OAAb,CAAqBA,OAAtB,CAAN,CAAqCC,IAArC,CAA0C,IAA1C;AAEAG,IAAAA,KAAK,CAACF,OAAN;AACAH,IAAAA,MAAM,CAACK,KAAK,CAACN,MAAN,CAAaE,OAAb,CAAqBA,OAAtB,CAAN,CAAqCC,IAArC,CAA0C,KAA1C,EANsD,CAQtD;;AACA,UAAMI,KAAK,GAAGX,UAAU,CAAC,MAAMC,eAAe,EAAtB,CAAxB;AACAI,IAAAA,MAAM,CAACM,KAAK,CAACP,MAAN,CAAaE,OAAb,CAAqBA,OAAtB,CAAN,CAAqCC,IAArC,CAA0C,IAA1C;AAEAI,IAAAA,KAAK,CAACH,OAAN;AACAH,IAAAA,MAAM,CAACM,KAAK,CAACP,MAAN,CAAaE,OAAb,CAAqBA,OAAtB,CAAN,CAAqCC,IAArC,CAA0C,KAA1C;AACD,GAdC,CAAF;AAeD,CA1CO,CAAR","sourcesContent":["import { renderHook } from \"@testing-library/react-hooks\";\n\nimport { useCheckMounted } from \"./useCheckMounted\";\n\ndescribe(\"useCheckMounted\", () => {\n  it(\"should be mounted after initialization\", () => {\n    const { result } = renderHook(() => useCheckMounted());\n\n    expect(result.current.current).toBe(true);\n  });\n\n  it(\"should be unmounted after cleanup\", () => {\n    const { result, unmount } = renderHook(() => useCheckMounted());\n\n    expect(result.current.current).toBe(true);\n\n    unmount();\n\n    expect(result.current.current).toBe(false);\n  });\n\n  it(\"should maintain mounted state during component lifecycle\", () => {\n    const { result, rerender } = renderHook(() => useCheckMounted());\n\n    expect(result.current.current).toBe(true);\n\n    rerender();\n\n    expect(result.current.current).toBe(true);\n  });\n\n  it(\"should handle multiple mount/unmount cycles\", () => {\n    // First instance\n    const hook1 = renderHook(() => useCheckMounted());\n    expect(hook1.result.current.current).toBe(true);\n\n    hook1.unmount();\n    expect(hook1.result.current.current).toBe(false);\n\n    // Second instance\n    const hook2 = renderHook(() => useCheckMounted());\n    expect(hook2.result.current.current).toBe(true);\n\n    hook2.unmount();\n    expect(hook2.result.current.current).toBe(false);\n  });\n});\n"]}