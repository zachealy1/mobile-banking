{"version":3,"sources":["useInitProps.ts"],"names":["React","computedFillDataWithAutoFillData","useInitProps","props","defaultIndex","data","rawData","loop","autoPlayInterval","_autoPlayInterval","scrollAnimationDuration","style","autoFillData","enabled","pagingEnabled","overscrollEnabled","snapEnabled","enableSnap","width","_width","height","_height","Math","round","max","useMemo","dataLength","length","rawDataLength","mode","modeConfig","showLength"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,gCAAT,QAAiD,uCAAjD;AAoBA,OAAO,SAASC,YAAT,CAAyBC,KAAzB,EAAgF;AAAA;;AACrF,QAAM;AACJC,IAAAA,YAAY,GAAG,CADX;AAEJC,IAAAA,IAAI,EAAEC,OAAO,GAAG,EAFZ;AAGJC,IAAAA,IAAI,GAAG,IAHH;AAIJC,IAAAA,gBAAgB,EAAEC,iBAAiB,GAAG,IAJlC;AAKJC,IAAAA,uBAAuB,GAAG,GALtB;AAMJC,IAAAA,KAAK,GAAG,EANJ;AAOJC,IAAAA,YAAY,GAAG,IAPX;AAQJ;AACAC,IAAAA,OAAO,GAAG,IATN;AAUJC,IAAAA,aAAa,GAAG,IAVZ;AAWJC,IAAAA,iBAAiB,GAAG,IAXhB;AAYJC,IAAAA,WAAW,wBAAGb,KAAK,CAACc,UAAT,iEAAuB,IAZ9B;AAaJC,IAAAA,KAAK,EAAEC,MAbH;AAcJC,IAAAA,MAAM,EAAEC;AAdJ,MAeFlB,KAfJ;AAiBA,QAAMe,KAAK,GAAGI,IAAI,CAACC,KAAL,CAAWJ,MAAM,IAAI,CAArB,CAAd;AACA,QAAMC,MAAM,GAAGE,IAAI,CAACC,KAAL,CAAWF,OAAO,IAAI,CAAtB,CAAf;AACA,QAAMb,gBAAgB,GAAGc,IAAI,CAACE,GAAL,CAASf,iBAAT,EAA4B,CAA5B,CAAzB;AAEA,QAAMJ,IAAI,GAAGL,KAAK,CAACyB,OAAN,CAAmB,MAAM;AACpC,WAAOxB,gCAAgC,CAAI;AACzCM,MAAAA,IADyC;AAEzCK,MAAAA,YAFyC;AAGzCP,MAAAA,IAAI,EAAEC,OAHmC;AAIzCoB,MAAAA,UAAU,EAAEpB,OAAO,CAACqB;AAJqB,KAAJ,CAAvC;AAMD,GAPY,EAOV,CAACrB,OAAD,EAAUC,IAAV,EAAgBK,YAAhB,CAPU,CAAb;AASA,QAAMc,UAAU,GAAGrB,IAAI,CAACsB,MAAxB;AACA,QAAMC,aAAa,GAAGtB,OAAO,CAACqB,MAA9B;;AAEA,MAAIxB,KAAK,CAAC0B,IAAN,KAAe,gBAAf,IAAmC1B,KAAK,CAAC0B,IAAN,KAAe,kBAAtD,EAA0E;AAAA;;AACxE,QAAI,CAAC1B,KAAK,CAAC2B,UAAX,EAAuB3B,KAAK,CAAC2B,UAAN,GAAmB,EAAnB;AAEvB3B,IAAAA,KAAK,CAAC2B,UAAN,CAAiBC,UAAjB,iDAA8B5B,KAAK,CAAC2B,UAApC,sDAA8B,kBAAkBC,UAAhD,yEAA8DL,UAAU,GAAG,CAA3E;AACD;;AAED,SAAO,EACL,GAAGvB,KADE;AAELC,IAAAA,YAFK;AAGLQ,IAAAA,YAHK;AAIL;AACAP,IAAAA,IALK;AAML;AACAqB,IAAAA,UAPK;AAQL;AACApB,IAAAA,OATK;AAUL;AACAsB,IAAAA,aAXK;AAYLrB,IAAAA,IAZK;AAaLM,IAAAA,OAbK;AAcLL,IAAAA,gBAdK;AAeLE,IAAAA,uBAfK;AAgBLC,IAAAA,KAhBK;AAiBLG,IAAAA,aAjBK;AAkBLE,IAAAA,WAlBK;AAmBLD,IAAAA,iBAnBK;AAoBLG,IAAAA,KApBK;AAqBLE,IAAAA;AArBK,GAAP;AAuBD","sourcesContent":["import React from \"react\";\n\nimport type { TCarouselProps } from \"../types\";\nimport { computedFillDataWithAutoFillData } from \"../utils/computed-with-auto-fill-data\";\n\ntype TGetRequiredProps<P extends keyof TCarouselProps> = Record<P, Required<TCarouselProps>[P]>;\n\nexport type TInitializeCarouselProps<T> = TCarouselProps<T> &\n  TGetRequiredProps<\n    | \"defaultIndex\"\n    | \"loop\"\n    | \"width\"\n    | \"height\"\n    | \"scrollAnimationDuration\"\n    | \"autoPlayInterval\"\n    | \"autoFillData\"\n  > & {\n    // Raw data that has not been processed\n    rawData: T[];\n    dataLength: number;\n    rawDataLength: number;\n  };\n\nexport function useInitProps<T>(props: TCarouselProps<T>): TInitializeCarouselProps<T> {\n  const {\n    defaultIndex = 0,\n    data: rawData = [],\n    loop = true,\n    autoPlayInterval: _autoPlayInterval = 1000,\n    scrollAnimationDuration = 500,\n    style = {},\n    autoFillData = true,\n    // switchers\n    enabled = true,\n    pagingEnabled = true,\n    overscrollEnabled = true,\n    snapEnabled = props.enableSnap ?? true,\n    width: _width,\n    height: _height,\n  } = props;\n\n  const width = Math.round(_width || 0);\n  const height = Math.round(_height || 0);\n  const autoPlayInterval = Math.max(_autoPlayInterval, 0);\n\n  const data = React.useMemo<T[]>(() => {\n    return computedFillDataWithAutoFillData<T>({\n      loop,\n      autoFillData,\n      data: rawData,\n      dataLength: rawData.length,\n    });\n  }, [rawData, loop, autoFillData]);\n\n  const dataLength = data.length;\n  const rawDataLength = rawData.length;\n\n  if (props.mode === \"vertical-stack\" || props.mode === \"horizontal-stack\") {\n    if (!props.modeConfig) props.modeConfig = {};\n\n    props.modeConfig.showLength = props.modeConfig?.showLength ?? dataLength - 1;\n  }\n\n  return {\n    ...props,\n    defaultIndex,\n    autoFillData,\n    // Fill data with autoFillData\n    data,\n    // Length of fill data\n    dataLength,\n    // Raw data that has not been processed\n    rawData,\n    // Length of raw data\n    rawDataLength,\n    loop,\n    enabled,\n    autoPlayInterval,\n    scrollAnimationDuration,\n    style,\n    pagingEnabled,\n    snapEnabled,\n    overscrollEnabled,\n    width,\n    height,\n  };\n}\n"]}