{"version":3,"sources":["useOffsetX.test.ts"],"names":["useSharedValue","renderHook","useOffsetX","describe","it","hook","range","negativeRange","positiveRange","inputs","Array","from","length","map","_","index","config","dataLength","handlerOffset","loop","size","input","expected","result","current","v","value","slice","expect","toMatchInlineSnapshot"],"mappings":"AAAA,SAASA,cAAT,QAA+B,yBAA/B;AAEA,SAASC,UAAT,QAA2B,8BAA3B;AAGA,SAASC,UAAT,QAA2B,cAA3B;AAGAC,QAAQ,CAAC,gBAAD,EAAmB,MAAM;AAC/BC,EAAAA,EAAE,CAAC,kCAAD,EAAqC,YAAY;AACjD,UAAMC,IAAI,GAAGJ,UAAU,CAAC,MAAM;AAC5B,YAAMK,KAAK,GAAGN,cAAc,CAAC;AAC3BO,QAAAA,aAAa,EAAE,CAAC,CAAD,EAAI,CAAJ,CADY;AAE3BC,QAAAA,aAAa,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFY,OAAD,CAA5B;AAIA,YAAMC,MAGJ,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAX,EAA2BC,GAA3B,CAA+B,CAACC,CAAD,EAAIC,KAAJ,MAAe;AACjDC,QAAAA,MAAM,EAAE;AACNC,UAAAA,UAAU,EAAE,EADN;AAENC,UAAAA,aAAa,EAAElB,cAAc,CAAC,CAAC,CAAF,CAFvB;AAGNe,UAAAA,KAHM;AAINI,UAAAA,IAAI,EAAE,KAJA;AAKNC,UAAAA,IAAI,EAAE;AALA,SADyC;AAQjDd,QAAAA;AARiD,OAAf,CAA/B,CAHL;AAcA,aAAOG,MAAM,CAACI,GAAP,CAAYQ,KAAD,IAAW;AAC3B,cAAM;AAAEL,UAAAA,MAAF;AAAUV,UAAAA;AAAV,YAAoBe,KAA1B;AAEA,eAAOnB,UAAU,CAACc,MAAD,EAASV,KAAT,CAAjB;AACD,OAJM,CAAP;AAKD,KAxBsB,CAAvB;AA0BA,UAAMgB,QAAQ,GAAGjB,IAAI,CAACkB,MAAL,CAAYC,OAAZ,CAAoBX,GAApB,CAAyBY,CAAD,IAAOA,CAAC,CAACC,KAAjC,EAAwCC,KAAxC,EAAjB;AAEAC,IAAAA,MAAM,CAACN,QAAD,CAAN,CAAiBO,qBAAjB,CAAwC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAbI;AAcD,GA3CC,CAAF;AA4CD,CA7CO,CAAR","sourcesContent":["import { useSharedValue } from \"react-native-reanimated\";\n\nimport { renderHook } from \"@testing-library/react-hooks\";\n\nimport type { IOpts } from \"./useOffsetX\";\nimport { useOffsetX } from \"./useOffsetX\";\nimport type { IVisibleRanges } from \"./useVisibleRanges\";\n\ndescribe(\"useSharedValue\", () => {\n  it(\"should return the correct values\", async () => {\n    const hook = renderHook(() => {\n      const range = useSharedValue({\n        negativeRange: [7, 9],\n        positiveRange: [0, 3],\n      }) as IVisibleRanges;\n      const inputs: Array<{\n        config: IOpts;\n        range: IVisibleRanges;\n      }> = Array.from({ length: 10 }).map((_, index) => ({\n        config: {\n          dataLength: 10,\n          handlerOffset: useSharedValue(-0),\n          index,\n          loop: false,\n          size: 393,\n        },\n        range,\n      }));\n\n      return inputs.map((input) => {\n        const { config, range } = input;\n\n        return useOffsetX(config, range);\n      });\n    });\n\n    const expected = hook.result.current.map((v) => v.value).slice();\n\n    expect(expected).toMatchInlineSnapshot(`\n            [\n              0,\n              393,\n              786,\n              1179,\n              9007199254740991,\n              9007199254740991,\n              9007199254740991,\n              2751,\n              3144,\n              3537,\n            ]\n        `);\n  });\n});\n"]}