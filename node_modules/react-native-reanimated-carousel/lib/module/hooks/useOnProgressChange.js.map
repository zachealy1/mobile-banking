{"version":3,"sources":["useOnProgressChange.ts"],"names":["runOnJS","useAnimatedReaction","computedOffsetXValueWithAutoFillData","useOnProgressChange","opts","autoFillData","loop","offsetX","size","rawDataLength","onProgressChange","isFunc","value","_value","Math","max","min","absoluteProgress","abs"],"mappings":"AACA,SAASA,OAAT,EAAkBC,mBAAlB,QAA6C,yBAA7C;AAGA,SAASC,oCAAT,QAAqD,uCAArD;AAEA,OAAO,SAASC,mBAAT,CACLC,IADK,EAQL;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA,IAA/B;AAAqCC,IAAAA,aAArC;AAAoDC,IAAAA;AAApD,MAAyEN,IAA/E,CADA,CAGA;AACA;AACA;AACA;;AACA,QAAMO,MAAM,GAAG,OAAOD,gBAAP,KAA4B,UAA3C;AAEAT,EAAAA,mBAAmB,CACjB,MAAMM,OAAO,CAACK,KADG,EAEhBC,MAAD,IAAY;AACV,QAAID,KAAK,GAAGV,oCAAoC,CAAC;AAC/CU,MAAAA,KAAK,EAAEC,MADwC;AAE/CJ,MAAAA,aAF+C;AAG/CD,MAAAA,IAH+C;AAI/CH,MAAAA,YAJ+C;AAK/CC,MAAAA;AAL+C,KAAD,CAAhD;;AAQA,QAAI,CAACA,IAAL,EAAW;AACTM,MAAAA,KAAK,GAAGE,IAAI,CAACC,GAAL,CAAS,EAAE,CAACN,aAAa,GAAG,CAAjB,IAAsBD,IAAxB,CAAT,EAAwCM,IAAI,CAACE,GAAL,CAASJ,KAAT,EAAgB,CAAhB,CAAxC,CAAR;AACD;;AAED,QAAIK,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASN,KAAK,GAAGJ,IAAjB,CAAvB;AAEA,QAAII,KAAK,GAAG,CAAZ,EAAeK,gBAAgB,GAAGR,aAAa,GAAGQ,gBAAnC;;AAEf,QAAIP,gBAAJ,EAAsB;AACpB,UAAIC,MAAJ,EAAYX,OAAO,CAACU,gBAAD,CAAP,CAA0BE,KAA1B,EAAiCK,gBAAjC,EAAZ,KACKP,gBAAgB,CAACE,KAAjB,GAAyBK,gBAAzB;AACN;AACF,GAvBgB,EAwBjB,CAACX,IAAD,EAAOD,YAAP,EAAqBI,aAArB,EAAoCC,gBAApC,CAxBiB,CAAnB;AA0BD","sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport { runOnJS, useAnimatedReaction } from \"react-native-reanimated\";\n\nimport type { TCarouselProps } from \"../types\";\nimport { computedOffsetXValueWithAutoFillData } from \"../utils/computed-with-auto-fill-data\";\n\nexport function useOnProgressChange(\n  opts: {\n    size: number;\n    autoFillData: boolean;\n    loop: boolean;\n    offsetX: Animated.SharedValue<number>;\n    rawDataLength: number;\n  } & Pick<TCarouselProps, \"onProgressChange\">\n) {\n  const { autoFillData, loop, offsetX, size, rawDataLength, onProgressChange } = opts;\n\n  // remember `isFunc` here because we can't accurately check typeof\n  // from within useAnimatedReaction because its code has been workletized;\n  // the `onProgressChange` value will be typeof \"object\" from within\n  // the worklet code even if it's a function.\n  const isFunc = typeof onProgressChange === \"function\";\n\n  useAnimatedReaction(\n    () => offsetX.value,\n    (_value) => {\n      let value = computedOffsetXValueWithAutoFillData({\n        value: _value,\n        rawDataLength,\n        size,\n        autoFillData,\n        loop,\n      });\n\n      if (!loop) {\n        value = Math.max(-((rawDataLength - 1) * size), Math.min(value, 0));\n      }\n\n      let absoluteProgress = Math.abs(value / size);\n\n      if (value > 0) absoluteProgress = rawDataLength - absoluteProgress;\n\n      if (onProgressChange) {\n        if (isFunc) runOnJS(onProgressChange)(value, absoluteProgress);\n        else onProgressChange.value = absoluteProgress;\n      }\n    },\n    [loop, autoFillData, rawDataLength, onProgressChange]\n  );\n}\n"]}