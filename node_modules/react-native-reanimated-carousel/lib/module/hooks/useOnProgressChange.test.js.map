{"version":3,"sources":["useOnProgressChange.test.tsx"],"names":["useSharedValue","renderHook","useOnProgressChange","jest","mock","reactionCallback","fn","initialValue","value","useAnimatedReaction","deps","cb","depsResult","runOnJS","Easing","bezier","factory","__triggerReaction","computedOffsetXValueWithAutoFillData","describe","mockOffsetX","mockOnProgressChange","requireMock","beforeEach","clearAllMocks","it","size","autoFillData","loop","offsetX","rawDataLength","onProgressChange","expect","toHaveBeenCalledWith","progressValue","toBe","not","toHaveBeenCalled"],"mappings":"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","sourcesContent":["import { useSharedValue } from \"react-native-reanimated\";\n\nimport { renderHook } from \"@testing-library/react-hooks\";\n\nimport { useOnProgressChange } from \"./useOnProgressChange\";\n\n// Mock Reanimated and Easing\njest.mock(\"react-native-reanimated\", () => {\n  let reactionCallback: ((value: any) => void) | null = null;\n\n  return {\n    useSharedValue: jest.fn((initialValue) => ({\n      value: initialValue,\n    })),\n    useAnimatedReaction: jest.fn((deps, cb) => {\n      reactionCallback = cb;\n      const depsResult = deps();\n      cb(depsResult);\n      return () => {\n        reactionCallback = null;\n      };\n    }),\n    runOnJS: jest.fn((fn) => fn),\n    Easing: {\n      bezier: () => ({\n        factory: () => 0,\n      }),\n    },\n    // Export the helper function for testing\n    __triggerReaction: (value: any) => {\n      if (reactionCallback) reactionCallback(value);\n    },\n  };\n});\n\n// Mock computedOffsetXValueWithAutoFillData\njest.mock(\"../utils/computed-with-auto-fill-data\", () => ({\n  computedOffsetXValueWithAutoFillData: jest.fn(({ value }) => value),\n}));\n\ndescribe(\"useOnProgressChange\", () => {\n  const mockOffsetX = useSharedValue(0);\n  const mockOnProgressChange = jest.fn();\n  const { __triggerReaction } = jest.requireMock(\"react-native-reanimated\");\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockOffsetX.value = 0;\n  });\n\n  it(\"should handle progress change with function callback\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: false,\n        offsetX: mockOffsetX,\n        rawDataLength: 5,\n        onProgressChange: mockOnProgressChange,\n      })\n    );\n\n    mockOffsetX.value = -300; // Move to next slide\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(-300, 1);\n  });\n\n  it(\"should handle progress change with shared value\", () => {\n    const progressValue = useSharedValue(0);\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: false,\n        offsetX: mockOffsetX,\n        rawDataLength: 5,\n        onProgressChange: progressValue,\n      })\n    );\n\n    mockOffsetX.value = -300; // Move to next slide\n    __triggerReaction(mockOffsetX.value);\n    expect(progressValue.value).toBe(1);\n  });\n\n  it(\"should handle loop mode\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: true,\n        offsetX: mockOffsetX,\n        rawDataLength: 5,\n        onProgressChange: mockOnProgressChange,\n      })\n    );\n\n    mockOffsetX.value = -1500; // Move to last slide\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(-1500, 5);\n  });\n\n  it(\"should handle autoFillData mode\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: true,\n        loop: false,\n        offsetX: mockOffsetX,\n        rawDataLength: 3,\n        onProgressChange: mockOnProgressChange,\n      })\n    );\n\n    mockOffsetX.value = -300; // Move to next slide\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(-300, 1);\n  });\n\n  it(\"should clamp values when not in loop mode\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: false,\n        offsetX: mockOffsetX,\n        rawDataLength: 3,\n        onProgressChange: mockOnProgressChange,\n      })\n    );\n\n    mockOffsetX.value = 300; // Try to move before first slide\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(0, 0);\n\n    mockOffsetX.value = -900; // Try to move after last slide\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(-600, 2);\n  });\n\n  it(\"should handle positive offset values\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: true,\n        offsetX: mockOffsetX,\n        rawDataLength: 5,\n        onProgressChange: mockOnProgressChange,\n      })\n    );\n\n    mockOffsetX.value = 300; // Move backwards\n    __triggerReaction(mockOffsetX.value);\n    expect(mockOnProgressChange).toHaveBeenCalledWith(300, 4);\n  });\n\n  it(\"should not call onProgressChange if not provided\", () => {\n    renderHook(() =>\n      useOnProgressChange({\n        size: 300,\n        autoFillData: false,\n        loop: false,\n        offsetX: mockOffsetX,\n        rawDataLength: 5,\n      })\n    );\n\n    mockOffsetX.value = -300;\n    expect(mockOnProgressChange).not.toHaveBeenCalled();\n  });\n});\n"]}