{"version":3,"sources":["usePanGestureProxy.test.tsx"],"names":["React","Text","Gesture","GestureDetector","GestureHandlerRootView","State","cleanup","render","fireGestureHandler","getByGestureTestId","usePanGestureProxy","beforeEach","mockedEventHandlers","begin","jest","fn","start","active","end","fail","cancel","finish","mockedEventHandlersFromUser","describe","SingleHandler","handlers","handlersFromUser","treatStartAsUpdate","pan","onConfigurePanGesture","gesture","onBegin","onUpdate","onEnd","onFinalize","withTestId","onGestureStart","onGestureUpdate","onGestureEnd","options","enabled","RacingHandlers","tapHandlers","panHandlers","tap","Tap","_","Race","it","state","BEGAN","ACTIVE","END","expect","toBeCalledWith","objectContaining","toBeCalled","not","panHandlersFromUser","translationX","toBeCalledTimes","toHaveBeenLastCalledWith","spyOn","console","error","oldState","UNDETERMINED","x","y","toThrow","each","FAILED","CANCELLED","lastState","any","Object","RacingTapAndPan","Exclusive","nthCalledWith","lastCalledWith","anything","toHaveBeenNthCalledWith","toHaveBeenCalledTimes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Text } from \"react-native\";\nimport type { PanGesture, PanGestureHandler, TapGesture } from \"react-native-gesture-handler\";\nimport {\n  Gesture,\n  GestureDetector,\n  GestureHandlerRootView,\n  State,\n} from \"react-native-gesture-handler\";\n\nimport { cleanup, render } from \"@testing-library/react-native\";\nimport { fireGestureHandler, getByGestureTestId } from \"react-native-gesture-handler/jest-utils\";\n\nimport { usePanGestureProxy } from \"./usePanGestureProxy\";\n\nbeforeEach(cleanup);\n\nconst mockedEventHandlers = () => {\n  return {\n    begin: jest.fn(),\n    start: jest.fn(),\n    active: jest.fn(),\n    end: jest.fn(),\n    fail: jest.fn(),\n    cancel: jest.fn(),\n    finish: jest.fn(),\n  };\n};\n\nconst mockedEventHandlersFromUser = () => {\n  return {\n    begin: jest.fn(),\n    start: jest.fn(),\n    active: jest.fn(),\n    end: jest.fn(),\n    fail: jest.fn(),\n    cancel: jest.fn(),\n    finish: jest.fn(),\n  };\n};\n\ndescribe(\"Using RNGH v2 gesture API\", () => {\n  interface SingleHandlerProps {\n    handlers: ReturnType<typeof mockedEventHandlers>;\n    handlersFromUser: ReturnType<typeof mockedEventHandlers>;\n    treatStartAsUpdate?: boolean;\n  }\n\n  function SingleHandler({ handlers, handlersFromUser, treatStartAsUpdate }: SingleHandlerProps) {\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (gesture: PanGesture) => {\n        // This is user's customizations\n        gesture\n          .onBegin(handlersFromUser.begin)\n          .onUpdate(handlersFromUser.active)\n          .onEnd(handlersFromUser.end)\n          .onFinalize(handlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={pan}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  interface RacingHandlersProps {\n    tapHandlers: ReturnType<typeof mockedEventHandlers>;\n    panHandlers: ReturnType<typeof mockedEventHandlers>;\n  }\n\n  function RacingHandlers({ tapHandlers, panHandlers }: RacingHandlersProps) {\n    const tap = Gesture.Tap().onBegin(tapHandlers.begin).onEnd(tapHandlers.end).withTestId(\"tap\");\n\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _.onBegin(panHandlers.begin).onFinalize(panHandlers.finish).withTestId(\"pan\");\n      },\n      onGestureStart: panHandlers.start,\n      onGestureUpdate: panHandlers.active,\n      onGestureEnd: panHandlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={Gesture.Race(tap, pan)}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"sends events to handlers\", () => {\n    const tapHandlers = mockedEventHandlers();\n    const panHandlers = mockedEventHandlers();\n    render(<RacingHandlers tapHandlers={tapHandlers} panHandlers={panHandlers} />);\n\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n    expect(panHandlers.begin).toBeCalledWith(expect.objectContaining({ state: State.BEGAN }));\n    expect(panHandlers.finish).toBeCalled();\n    expect(tapHandlers.begin).not.toBeCalled();\n  });\n\n  it(\"sends events with additional data to handlers\", () => {\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n    render(\n      <SingleHandler\n        handlers={panHandlers}\n        handlersFromUser={panHandlersFromUser}\n        treatStartAsUpdate\n      />\n    );\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN, translationX: 0 },\n      { state: State.ACTIVE, translationX: 10 },\n      { translationX: 20 },\n      { translationX: 20 },\n      { state: State.END, translationX: 30 },\n    ]);\n\n    expect(panHandlersFromUser.begin).toBeCalledTimes(1);\n    expect(panHandlersFromUser.active).toBeCalledTimes(2);\n    expect(panHandlersFromUser.end).toBeCalledTimes(1);\n\n    expect(panHandlers.active).toBeCalledTimes(3);\n    expect(panHandlers.active).toHaveBeenLastCalledWith(\n      expect.objectContaining({ translationX: 20 })\n    );\n  });\n\n  it(\"does not include console.error in the output\", () => {\n    // if react-native-gesture-handler detects that some handlers are\n    // workletized and some are not, it will log an error to the\n    // console. We'd like to make sure that this doesn't happen.\n\n    // The error that would be shown looks like:\n    // [react-native-gesture-handler] Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.\n\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n\n    jest.spyOn(console, \"error\");\n\n    render(\n      <SingleHandler\n        handlers={panHandlers}\n        handlersFromUser={panHandlersFromUser}\n        treatStartAsUpdate\n      />\n    );\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n\n    expect(console.error).not.toBeCalled();\n  });\n});\n\ndescribe(\"Event list validation\", () => {\n  interface SingleHandlerProps {\n    handlers: ReturnType<typeof mockedEventHandlers>;\n    handlersFromUser: ReturnType<typeof mockedEventHandlers>;\n    treatStartAsUpdate?: boolean;\n  }\n\n  function SingleHandler({ handlers, handlersFromUser, treatStartAsUpdate }: SingleHandlerProps) {\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _.onBegin(handlersFromUser.begin)\n          .onUpdate(handlersFromUser.active)\n          .onEnd(handlersFromUser.end)\n          .onFinalize(handlers.finish)\n          .withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={pan}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"throws error when oldState doesn't correspond to previous event's state\", () => {\n    const panHandlers = mockedEventHandlers();\n    const panHandlersFromUser = mockedEventHandlersFromUser();\n    render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} />);\n\n    expect(() => {\n      fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n        { oldState: State.UNDETERMINED, state: State.BEGAN, x: 0, y: 10 },\n        { oldState: State.UNDETERMINED, state: State.ACTIVE, x: 1, y: 11 },\n      ]);\n    }).toThrow(\"when state changes, oldState should be the same as previous event' state\");\n  });\n\n  it.each([[State.END], [State.FAILED], [State.CANCELLED]])(\n    \"correctly handles events ending with state %s\",\n    (lastState) => {\n      const panHandlers = mockedEventHandlers();\n      const panHandlersFromUser = mockedEventHandlersFromUser();\n      render(<SingleHandler handlers={panHandlers} handlersFromUser={panHandlersFromUser} />);\n      fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n        { state: State.BEGAN },\n        { state: State.ACTIVE },\n        { state: lastState },\n      ]);\n\n      expect(panHandlersFromUser.begin).toBeCalledTimes(1);\n      expect(panHandlersFromUser.active).toBeCalledTimes(0);\n      expect(panHandlersFromUser.end).toBeCalledTimes(1);\n\n      if (lastState === State.END) expect(panHandlers.end).toBeCalled();\n      else expect(panHandlers.finish).toBeCalledWith(expect.any(Object), false);\n    }\n  );\n});\n\ndescribe(\"Filling event list with defaults\", () => {\n  interface RacingTapAndPanProps {\n    handlers: ReturnType<typeof mockedEventHandlers>;\n    treatStartAsUpdate?: boolean;\n  }\n\n  function RacingTapAndPan({ handlers, treatStartAsUpdate }: RacingTapAndPanProps) {\n    const tap = Gesture.Tap().onBegin(handlers.begin).onEnd(handlers.end).withTestId(\"tap\");\n\n    const pan = usePanGestureProxy({\n      onConfigurePanGesture: (_: PanGesture) => {\n        _.onBegin(handlers.begin).onFinalize(handlers.finish).withTestId(\"pan\");\n      },\n      onGestureStart: treatStartAsUpdate ? handlers.active : handlers.start,\n      onGestureUpdate: handlers.active,\n      onGestureEnd: handlers.end,\n      options: { enabled: true },\n    });\n\n    return (\n      <GestureHandlerRootView>\n        <GestureDetector gesture={Gesture.Exclusive(pan, tap)}>\n          <Text>v2 API test</Text>\n        </GestureDetector>\n      </GestureHandlerRootView>\n    );\n  }\n\n  it(\"fills oldState if not passed\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGestureHandler>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN },\n      { state: State.ACTIVE },\n      { state: State.ACTIVE },\n      { state: State.ACTIVE },\n      { state: State.END },\n    ]);\n\n    expect(handlers.begin).toBeCalledWith(\n      expect.objectContaining({ oldState: State.UNDETERMINED })\n    );\n    expect(handlers.active).nthCalledWith(1, expect.objectContaining({ oldState: State.BEGAN }));\n    expect(handlers.active).lastCalledWith(\n      expect.not.objectContaining({ oldState: expect.anything() })\n    );\n    expect(handlers.end).toBeCalledWith(expect.objectContaining({ oldState: State.ACTIVE }), true);\n  });\n\n  it(\"fills missing ACTIVE states\", () => {\n    const panHandlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={panHandlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { state: State.BEGAN, x: 0, y: 10 },\n      { state: State.ACTIVE, x: 1, y: 11 },\n      { x: 2, y: 12 },\n      { x: 3, y: 13 },\n      { state: State.END, x: 4, y: 14 },\n    ]);\n\n    expect(panHandlers.active).toBeCalledTimes(3);\n    expect(panHandlers.active).toHaveBeenLastCalledWith(expect.objectContaining({ x: 3, y: 13 }));\n  });\n\n  it(\"fills BEGIN and END events for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"), [{ x: 5 }]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledTimes(1);\n  });\n\n  it(\"with FAILED event, fills BEGIN event for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"), [{ state: State.FAILED }]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledWith(expect.anything(), false);\n  });\n\n  it(\"uses event data from first event in filled BEGIN, ACTIVE events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [{ x: 120 }]);\n    expect(handlers.begin).toBeCalledWith(expect.objectContaining({ x: 120 }));\n    expect(handlers.active).toHaveBeenNthCalledWith(1, expect.objectContaining({ x: 120 }));\n  });\n\n  it(\"uses event data from last event in filled END events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [{ x: 120, state: State.FAILED }]);\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.active).toBeCalledTimes(1);\n    expect(handlers.end).toBeCalledWith(expect.objectContaining({ x: 120 }), false);\n  });\n\n  it(\"uses event data filled events\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"), [\n      { x: 5, y: 15 },\n      { x: 6, y: 16 },\n      { x: 7, y: 17 },\n    ]);\n    expect(handlers.begin).toBeCalledWith(expect.objectContaining({ x: 5, y: 15 }));\n    expect(handlers.active).toBeCalledTimes(3);\n    expect(handlers.end).toBeCalledWith(expect.objectContaining({ x: 7, y: 17 }), true);\n  });\n\n  it(\"fills BEGIN and END events when they're not present, for discrete handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<TapGesture>(getByGestureTestId(\"tap\"));\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.end).toHaveBeenCalledTimes(1);\n  });\n\n  it(\"fills BEGIN, ACTIVE and END events when they're not present, for continuous handlers\", () => {\n    const handlers = mockedEventHandlers();\n    render(<RacingTapAndPan handlers={handlers} treatStartAsUpdate />);\n    fireGestureHandler<PanGesture>(getByGestureTestId(\"pan\"));\n    expect(handlers.begin).toBeCalledTimes(1);\n    expect(handlers.active).toBeCalledTimes(1);\n    expect(handlers.end).toHaveBeenCalledTimes(1);\n  });\n});\n"]}