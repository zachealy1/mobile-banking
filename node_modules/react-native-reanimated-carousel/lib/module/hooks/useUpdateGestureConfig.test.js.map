{"version":3,"sources":["useUpdateGestureConfig.test.ts"],"names":["renderHook","useUpdateGestureConfig","describe","mockGesture","enabled","jest","fn","mockReturnThis","beforeEach","clearAllMocks","it","expect","toHaveBeenCalledWith","not","toHaveBeenCalled","rerender","props","initialProps","mockClear","newMockGesture","gesture","config","unmount"],"mappings":"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","sourcesContent":["import { renderHook } from \"@testing-library/react-hooks\";\n\nimport { useUpdateGestureConfig } from \"./useUpdateGestureConfig\";\n\ndescribe(\"useUpdateGestureConfig\", () => {\n  const mockGesture = {\n    enabled: jest.fn().mockReturnThis(),\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it(\"should update gesture enabled state\", () => {\n    renderHook(() =>\n      useUpdateGestureConfig(mockGesture as any, {\n        enabled: true,\n      })\n    );\n\n    expect(mockGesture.enabled).toHaveBeenCalledWith(true);\n  });\n\n  it(\"should handle undefined enabled state\", () => {\n    renderHook(() => useUpdateGestureConfig(mockGesture as any, {}));\n\n    expect(mockGesture.enabled).not.toHaveBeenCalled();\n  });\n\n  it(\"should update when enabled state changes\", () => {\n    const { rerender } = renderHook((props) => useUpdateGestureConfig(mockGesture as any, props), {\n      initialProps: { enabled: true },\n    });\n\n    expect(mockGesture.enabled).toHaveBeenCalledWith(true);\n\n    rerender({ enabled: false });\n    expect(mockGesture.enabled).toHaveBeenCalledWith(false);\n  });\n\n  it(\"should not update when enabled state remains the same\", () => {\n    const { rerender } = renderHook((props) => useUpdateGestureConfig(mockGesture as any, props), {\n      initialProps: { enabled: true },\n    });\n\n    mockGesture.enabled.mockClear();\n\n    rerender({ enabled: true });\n    expect(mockGesture.enabled).not.toHaveBeenCalled();\n  });\n\n  it(\"should handle gesture object changes\", () => {\n    const newMockGesture = {\n      enabled: jest.fn().mockReturnThis(),\n    };\n\n    const { rerender } = renderHook(\n      ({ gesture, config }) => useUpdateGestureConfig(gesture as any, config),\n      {\n        initialProps: {\n          gesture: mockGesture,\n          config: { enabled: true },\n        },\n      }\n    );\n\n    expect(mockGesture.enabled).toHaveBeenCalledWith(true);\n\n    rerender({\n      gesture: newMockGesture,\n      config: { enabled: true },\n    });\n\n    expect(newMockGesture.enabled).toHaveBeenCalledWith(true);\n  });\n\n  it(\"should cleanup properly on unmount\", () => {\n    const { unmount } = renderHook(() =>\n      useUpdateGestureConfig(mockGesture as any, {\n        enabled: true,\n      })\n    );\n\n    mockGesture.enabled.mockClear();\n    unmount();\n\n    expect(mockGesture.enabled).not.toHaveBeenCalled();\n  });\n});\n"]}