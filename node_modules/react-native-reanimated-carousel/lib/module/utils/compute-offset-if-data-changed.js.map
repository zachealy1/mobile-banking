{"version":3,"sources":["compute-offset-if-data-changed.ts"],"names":["omitZero","a","b","computeOffsetIfDataChanged","params","direction","handlerOffset","_handlerOffset","size","previousLength","currentLength","positionIndex","round","isPositive","Math","abs","Number","parseInt","String","prevOffset","prevIndex","changedLength","changedOffset"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,CAAlB,EAA6BC,CAA7B,EAAwC;AAC7C;;AACA,MAAID,CAAC,KAAK,CAAV,EAAa,OAAO,CAAP;AAEb,SAAOC,CAAP;AACD;AAED,OAAO,SAASC,0BAAT,CAAoCC,MAApC,EAMJ;AACD;;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,aAAa,EAAEC,cAA5B;AAA4CC,IAAAA,IAA5C;AAAkDC,IAAAA,cAAlD;AAAkEC,IAAAA;AAAlE,MAAoFN,MAA1F;AAEA,MAAIE,aAAa,GAAGC,cAApB;AACA,MAAII,aAAJ;AACA,MAAIC,KAAJ;AAEA,QAAMC,UAAU,GAAGR,SAAS,GAAG,CAA/B;;AAEA,MAAIQ,UAAJ,EAAgB;AACdF,IAAAA,aAAa,GAAGG,IAAI,CAACC,GAAL,CAAST,aAAT,IAA0BE,IAA1C;AACAI,IAAAA,KAAK,GAAGI,MAAM,CAACC,QAAP,CAAgBC,MAAM,CAAClB,QAAQ,CAACS,cAAD,EAAiBE,aAAa,GAAGF,cAAjC,CAAT,CAAtB,CAAR;AACD,GAHD,MAGO;AACLE,IAAAA,aAAa,GAAG,CAACG,IAAI,CAACC,GAAL,CAAST,aAAT,IAA0BE,IAA3B,IAAmCA,IAAnD;AACAI,IAAAA,KAAK,GAAGI,MAAM,CAACC,QAAP,CAAgBC,MAAM,CAAClB,QAAQ,CAACS,cAAD,EAAiBE,aAAa,GAAGF,cAAjC,CAAT,CAAtB,IAAoF,CAA5F;AACD;;AAED,QAAMU,UAAU,GAAGnB,QAAQ,CAACS,cAAD,EAAiBE,aAAa,GAAGF,cAAjC,CAA3B;AACA,QAAMW,SAAS,GAAGP,UAAU,GAAGM,UAAH,GAAgBV,cAAc,GAAGU,UAAjB,GAA8B,CAA1E;AACA,QAAME,aAAa,GAAGT,KAAK,IAAIF,aAAa,GAAGD,cAApB,CAA3B;AACA,QAAMa,aAAa,GAAGD,aAAa,GAAGb,IAAtC;;AACA,MAAIY,SAAS,GAAGV,aAAa,GAAG,CAA5B,IAAiCA,aAAa,GAAGD,cAArD,EAAqE;AACnE,QAAII,UAAJ,EAAgBP,aAAa,GAAG,CAACI,aAAa,GAAG,CAAjB,IAAsBF,IAAtB,GAA6BH,SAA7C,CAAhB,KACKC,aAAa,GAAG,CAACI,aAAa,GAAG,CAAjB,IAAsBF,IAAtB,GAA6B,CAAC,CAA9C;AACN,GAHD,MAGO;AACLF,IAAAA,aAAa,IAAIgB,aAAa,GAAGjB,SAAjC;AACD;;AAED,SAAOC,aAAP;AACD","sourcesContent":["export function omitZero(a: number, b: number) {\n  \"worklet\";\n  if (a === 0) return 0;\n\n  return b;\n}\n\nexport function computeOffsetIfDataChanged(params: {\n  direction: number;\n  handlerOffset: number;\n  size: number;\n  previousLength: number;\n  currentLength: number;\n}) {\n  \"worklet\";\n  const { direction, handlerOffset: _handlerOffset, size, previousLength, currentLength } = params;\n\n  let handlerOffset = _handlerOffset;\n  let positionIndex: number;\n  let round: number;\n\n  const isPositive = direction < 0;\n\n  if (isPositive) {\n    positionIndex = Math.abs(handlerOffset) / size;\n    round = Number.parseInt(String(omitZero(previousLength, positionIndex / previousLength)));\n  } else {\n    positionIndex = (Math.abs(handlerOffset) - size) / size;\n    round = Number.parseInt(String(omitZero(previousLength, positionIndex / previousLength))) + 1;\n  }\n\n  const prevOffset = omitZero(previousLength, positionIndex % previousLength);\n  const prevIndex = isPositive ? prevOffset : previousLength - prevOffset - 1;\n  const changedLength = round * (currentLength - previousLength);\n  const changedOffset = changedLength * size;\n  if (prevIndex > currentLength - 1 && currentLength < previousLength) {\n    if (isPositive) handlerOffset = (currentLength - 1) * size * direction;\n    else handlerOffset = (currentLength - 1) * size * -1;\n  } else {\n    handlerOffset += changedOffset * direction;\n  }\n\n  return handlerOffset;\n}\n"]}